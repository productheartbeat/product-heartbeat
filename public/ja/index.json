




[{"content":" Blowfish にはたくさんの機能が詰まっています。 元々、Blowfish の目標は、シンプルで軽量なテーマを開発することでした。このテーマは Congo をフォークし、その当初のビジョンを発展させたものです。\nTailwind CSS 3.0 # Tailwind CSS は Blowfish の中核であり、今回のリリースには最新の Tailwind CSS バージョン 3 が含まれています。パフォーマンスの最適化と、いくつかの素晴らしい新しい CSS 機能のサポートが追加されています。\n多言語対応 # 多くの要望が寄せられていた多言語対応が Blowfish に追加されました！コンテンツを複数の言語で公開すると、サイトは利用可能なすべての翻訳で構築されます。\n🇬🇧 🇩🇪 🇫🇷 🇪🇸 🇨🇳 🇧🇷 🇹🇷 🇧🇩 コミュニティからの貢献のおかげで、Blowfish はすでに30の言語に翻訳されており、今後も追加される予定です。ちなみに、新しい言語のプルリクエストはいつでも大歓迎です！\nRTL 言語対応 # 新しい Tailwind と多言語機能の利点の1つは、RTL 言語サポートを追加できることです。有効にすると、サイト全体のコンテンツが右から左に並べ替えられます。テーマ内のすべての要素が、このモードで見栄えが良くなるように再スタイルされており、RTL 言語でコンテンツを生成したい制作者を支援します。\nRTL は言語ごとに制御されるため、プロジェクト内で RTL と LTR の両方のコンテンツを混在させることができ、テーマはそれに応じて対応します。\n自動画像リサイズ # Blowfish 2.0 の大きな変更点は、自動画像リサイズ機能の追加です。Hugo Pipes の力を使って、Markdown コンテンツ内の画像が自動的に異なる出力サイズにスケーリングされるようになりました。これらは HTML の srcset 属性を使用して表示され、最適化されたファイルサイズをサイト訪問者に提供できます。\n\u0026lt;!-- Markdown: ![私の画像](image.jpg) --\u0026gt; \u0026lt;img srcset=\u0026#34; /image_320x0_resize_q75_box.jpg 320w, /image_635x0_resize_q75_box.jpg 635w, /image_1024x0_resize_q75_box.jpg 1024w\u0026#34; src=\u0026#34;/image_635x0_resize_q75_box.jpg\u0026#34; alt=\u0026#34;私の画像\u0026#34; /\u0026gt; 何よりも、何も変更する必要はありません！標準の Markdown 画像構文を挿入するだけで、あとはテーマが処理してくれます。もう少し細かく制御したい場合は、figure ショートコードが完全に書き変えれば、同じリサイズ機能が利用できます。\nサイト内検索 # Fuse.js を搭載したサイト内検索により、訪問者はコンテンツをすばやく簡単に見つけることができます。すべての検索はクライアント側で実行されるため、サーバー側で設定する必要はなく、クエリは非常に高速に実行されます。サイト設定で機能を有効にするだけで、準備完了です。もちろん、完全なキーボードナビゲーションもサポートされています！\n目次 # 多くの要望が寄せられていた機能である、記事ページに目次を表示できるようになりました。このページで実際に動作を確認できます。目次は完全にレスポンシブ対応で、さまざまな画面解像度で利用可能なスペースを活用するように調整されます。\nグローバルまたは記事ごとに利用可能な目次は、標準の Hugo 設定値を使用して完全にカスタマイズでき、プロジェクトに合わせて動作を調整できます。\nアクセシビリティの改善 # ARIA 属性説明をより多くの項目に追加したり、特定のテキスト要素のコントラストを調整したりするなど、今回のリリースはこれまでで最もアクセシブルなものとなっています。\nバージョン2では、「コンテンツへスキップ」リンクと「トップへスクロール」リンクも導入され、すばやく移動できるようになりました。マウスを使わずに検索などの項目を有効にするためのキーボードショートカットもあります。\n新しい画像リサイズ機能では、alt 属性と title 属性を完全に制御できるため、すべての訪問者にアクセシブルなエクスペリエンスを提供できます。\nその他にもたくさん # 他にもたくさんの新機能があります。記事やリストページにタクソノミーを表示したり、新しい headline 著者パラメータを使用してホームページをカスタマイズしたりできます。また、JSON-LD 構造化データが改善され、SEO パフォーマンスがさらに最適化されています。\n","externalUrl":null,"permalink":"/ja/docs/welcome/","section":"ドキュメント","summary":"","title":"Blowfish へようこそ","type":"docs"},{"content":"Hugo のクイックスタートガイドに従うだけで、簡単に使い始めることができます。\n詳細なインストール手順は以下に記載されています。テーマのアップデート方法についても説明しています。\nインストール # 以下の手順では、全くの新規状態から Hugo と Blowfish を使用してウェブサイトを立ち上げる方法を説明します。このガイドで紹介するツールのほとんどは、お使いのプラットフォームに対応したパッケージマネージャーからインストール可能です。\nHugo のインストール # Hugo を初めて使用する場合は、公式サイトの手順に従って、ローカルマシンにインストールしてください。すでにインストールされているかどうかは、コマンド hugo version を実行して確認できます。\nテーマは最新の Hugo の機能を活用しているため、Hugo バージョン 0.87.0 以降を使用していることを確認してください。 お使いのプラットフォームに合わせた詳細なインストール手順は、Hugo の公式ドキュメントに記載されています。\nBlowfish Tools (推奨) # Blowfish を簡単に使い始められるよう、新しく CLI ツールをリリースしました。このツールは、新しい Hugo プロジェクトの作成、テーマのインストール、そしてテーマ設定ファイルのセットアップを自動的に行います。まだベータ版ですので、問題を発見した場合は報告にご協力ください。\nnpm (または他のパッケージマネージャー) を使用して、CLI ツールをグローバルにインストールします。\nnpx blowfish-tools または\nnpm i -g blowfish-tools 次に、コマンド blowfish-tools を実行すると、対話形式でプロジェクトの作成と設定をガイドしてくれます。\nblowfish-tools また、コマンド blowfish-tools new を実行すれば、新しい Hugo プロジェクトの作成とテーマのインストールを一度に行うこともできます。詳細は、CLI のヘルプを参照してください。\nblowfish-tools new mynewsite CLI ツールを使って Blowfish を迅速に使い始める方法を、以下の動画でご覧いただけます。\nCLI を使用しないインストール # 新しいサイトの作成 # コマンド hugo new site mywebsite を実行して、mywebsite という名前のディレクトリに新しい Hugo サイトを作成します。\nプロジェクトディレクトリには任意の名前を付けることができますが、以降の手順では mywebsite という名前を想定して説明します。別の名前を使用する場合は、適宜読み替えてください。\nBlowfish テーマのダウンロード # Hugo ウェブサイトに Blowfish テーマをインストールするには、いくつかの方法があります。インストールとメンテナンスが簡単な方法から難しい方法まで、以下の通りです。\nGit サブモジュールを使用する (推奨) Hugo モジュールを使用する 手動でファイルをコピーする どの方法を選べば良いか分からない場合は、Git サブモジュール方式を選択することをお勧めします。\nGit を使用してインストールする # この方法は、テーマを最新の状態に保つための最も迅速で簡単な方法です。Hugo と Go に加えて、ローカルマシンに Git がインストールされていることも確認してください。\n(上記で作成した) Hugo ウェブサイトのディレクトリに移動し、新しい git リポジトリを初期化して、Blowfish をサブモジュールとして追加します。\ncd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 次に、テーマ設定ファイルを作成するに進みます。\nHugo を使用してインストールする # この方法では、Hugo を使用してテーマを管理します。Hugo は Go を使用してモジュールを初期化および管理するため、続行する前に go がインストールされていることを確認する必要があります。\nGo をダウンロードしてインストールします。コマンド go version を使用して、すでにインストールされているかどうかを確認できます。\nHugo ではモジュールが正しく動作するために Go バージョン 1.12 以降 が必要です。必ず対応バージョンを使用してください。 (上記で作成した) Hugo プロジェクトディレクトリから、ウェブサイトのモジュールを初期化します。\n# プロジェクトを GitHub で管理している場合 hugo mod init github.com/\u0026lt;ユーザー名\u0026gt;/\u0026lt;リポジトリ名\u0026gt; # プロジェクトをローカルで管理している場合 hugo mod init my-project 新しいファイル config/_default/module.toml を作成し、以下を記述して、テーマを設定に追加します。\n[[imports]] disable = false path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; hugo server を実行してサーバーを起動すると、テーマが自動的にダウンロードされます。\nテーマ設定ファイルを作成するに進みます。\n手動でインストールする # テーマソースコードの最新リリースをダウンロードします。\nGitHub からダウンロード アーカイブを解凍し、フォルダ名を blowfish に変更して、Hugo プロジェクトのルートフォルダ内の themes/ ディレクトリに移動します。\nテーマ設定ファイルを作成するに進みます。\nテーマ設定ファイルを作成する # ウェブサイトのルートフォルダで、Hugo によって自動生成された hugo.toml ファイルを削除します。*.toml 設定ファイルをテーマから config/_default/ フォルダにコピーします。これにより、必要なテーマ設定がすべて適用され、テーマを簡単にカスタマイズできるようになります。\n注意: プロジェクトに module.toml ファイルがすでに存在する場合は、上書きしないでください。 テーマのインストール方法によって、テーマ設定ファイルの場所は異なります。\nHugo モジュール: Hugo キャッシュディレクトリ、または GitHub から 設定ファイルのコピーをダウンロード します Git サブモジュールまたは手動インストール: themes/blowfish/config/_default ファイルをコピーしたら、設定フォルダは次のようになります。\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml # Hugo モジュールを使用してインストールした場合 └─ params.toml 重要: Hugo モジュールを使用せずに Blowfish をインストールした場合は、hugo.toml ファイルの先頭に theme = \u0026quot;blowfish\u0026quot; という行を追加する必要があります。 次のステップ # これで Blowfish の基本的なインストールは完了です。始めるセクションに進んで、テーマの設定についてさらに詳しく学びましょう。\nテーマのアップデート方法 # 不具合の修正や新機能の追加を含む新しいリリースが随時公開されます。これらの変更を反映するには、ウェブサイトのテーマファイルをアップデートする必要があります。\nアップデート方法は、最初にテーマをインストールした方法によって異なります。各方法の手順は以下に記載されています。\nGit サブモジュール Hugo モジュール 手動でファイルをコピー Git を使用してアップデートする # Git サブモジュールは、git コマンドを使用してアップデートできます。次のコマンドを実行するだけで、テーマの最新バージョンがローカルリポジトリにダウンロードされます。\ngit submodule update --remote --merge サブモジュールがアップデートされたら、サイトを再びビルドし、すべてが期待通りに動作することを確認してください。\nHugo を使用してアップデートする # Hugo を使用すると、モジュールのアップデートが非常に簡単になります。プロジェクトディレクトリに移動して、次のコマンドを実行するだけです。\nhugo mod get -u Hugo は、プロジェクトに必要なモジュールを自動的にアップデートします。これは、module.toml ファイルと go.mod ファイルを調べることで行われます。アップデートに問題がある場合は、これらのファイルが正しく設定されていることを確認してください。\nその後、サイトを再びビルドし、すべてが期待通りに動作することを確認してください。\n手動でアップデートする # Blowfish を手動でアップデートするには、テーマの最新コピーをダウンロードして、プロジェクトの古いバージョンを置き換える必要があります。\nこの処理を行うと、テーマファイルに加えたローカルの変更はすべて失われるので注意してください。 テーマソースコードの最新リリースをダウンロードします。\nGitHub からダウンロード アーカイブを解凍し、フォルダ名を blowfish に変更して、Hugo プロジェクトのルートフォルダ内の themes/ ディレクトリに移動します。すべてのテーマファイルを置き換えるには、既存のディレクトリを上書きする必要があります。\nサイトを再びビルドし、すべてが期待通りに動作することを確認してください。\n","externalUrl":null,"permalink":"/ja/docs/installation/","section":"ドキュメント","summary":"","title":"インストール","type":"docs"},{"content":" このセクションでは、Blowfish テーマをすでにインストールしていることを前提としています。 Blowfish の使用開始を支援する CLI ツールをリリースしました。インストールと設定に役立ちます。次のコマンドで CLI ツールをグローバルにインストールします。\nnpx blowfish-tools Blowfish に同梱されている設定ファイルには、テーマが認識できるすべての設定が含まれています。デフォルトでは、これらの多くはコメントアウトされていますが、コメントを解除するだけで特定の機能を有効化または変更できます。\n基本設定 # コンテンツを作成する前に、新しいインストール用に設定する必要があるものがいくつかあります。まず、hugo.toml ファイルで、baseURL と languageCode パラメータを設定します。languageCode は、コンテンツの作成に使用する主要言語に設定する必要があります。\n# config/_default/hugo.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;ja\u0026#34; 次のステップは、言語設定です。Blowfish は多言語設定をサポートしていますが、ここではまず主要言語を設定します。\n設定フォルダで languages.en.toml ファイルを見つけます。主要言語が英語の場合は、このファイルをそのまま使用できます。それ以外の場合は、ファイル名に正しい言語コードが含まれるように名前を変更します。例えば日本語の場合は、languages.ja.tomlにファイル名を変更します。\n言語設定ファイル名の言語コードは、hugo.toml の languageCode 設定と一致する必要があることに注意してください。 # config/_default/languages.ja.toml title = \u0026#34;私の素晴らしいウェブサイト\u0026#34; [params.author] name = \u0026#34;私の名前\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;一般的に素晴らしい人間\u0026#34; bio = \u0026#34;私について少し\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] [params.author] 設定は、ウェブサイトに著者情報をどのように表示するかを決定します。画像はサイトの assets/ フォルダに配置する必要があります。リンクはリストされている順序で表示されます。\nこれらの設定オプションの詳細については、設定セクションで説明しています。\nカラースキーム # Blowfish には、すぐに使用できる多くのカラースキームが付属しています。スキームを変更するには、colorScheme テーマパラメータを設定するだけです。有効なオプションは、blowfish (デフォルト)、avocado、fire、ocean、forest、princess、neon、bloody、terminal、marvel、noir、autumn、congo、slate です。\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish は、テーマ全体で使用される3色のパレットを定義しています。各メインカラーには、Tailwind に含まれる色に基づいた10の色合いが含まれています。3つのメインカラーは、ヘッダー、フッター、およびアクセントカラーに使用されます。各スキームの色は次のとおりです。\nBlowfish (デフォルト) # Avocado # Fire # Ocean # Forest # Princess # Neon # Bloody # Terminal # Marvel # Noir # Autumn # Congo # Slate # これらはデフォルトのスキームですが、独自のスキームを作成することもできます。詳細については、高度なカスタマイズセクションを参照してください。\nコンテンツの整理 # デフォルトでは、Blowfish は特定のコンテンツタイプを使用することを強制しません。そのため、コンテンツを自由に定義できます。静的サイトの場合は pages、ブログの場合は posts、ポートフォリオの場合は projects を使用することをお勧めします。\n基本的な Blowfish プロジェクトの概要を簡単に説明します。すべてのコンテンツは content フォルダ内に配置されます。\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── blowfish このテーマは Hugo のページバンドルを最大限に活用するように設計されているため、Hugo がどのようにコンテンツを整理することを想定しているかをしっかりと把握することが重要です。詳細については、Hugo 公式ドキュメントを参照してください。\nBlowfish はタクソノミーに関しても柔軟です。tags と categories を使用してコンテンツをグループ化することを好む人もいれば、topics を使用することを好む人もいます。\nHugo はデフォルトで posts、tags、categories を使用するように設定されており、これを希望する場合は問題なく動作します。ただし、これをカスタマイズしたい場合は、taxonomies.toml 設定ファイルを作成することでカスタマイズできます。\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; これにより、デフォルトの tags と categories が topic に置き換えられます。タクソノミーの命名の詳細については、Hugo タクソノミードキュメントを参照してください。\n新しいタクソノミーを作成する場合は、ウェブサイトのナビゲーションリンクを調整して、正しいセクションを指すようにする必要があります。これについては以下で説明します。\nメニュー # Blowfish には、サイトのコンテンツとレイアウトに合わせてカスタマイズできる2つのメニューがあります。main メニューはサイトヘッダーに表示され、footer メニューはページの下部、著作権表示のすぐ上に表示されます。\nどちらのメニューも menus.ja.toml ファイルで設定できます。言語設定ファイルと同様に、別の言語を使用したい場合は、このファイルの名前を変更して、en を使用したい言語コードに置き換えます。\n# config/_default/menus.ja.toml [[main]] name = \u0026#34;ブログ\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;トピック\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;プライバシー\u0026#34; url = \u0026#34;https://external-link\u0026#34; name パラメータは、メニューリンクで使用されるテキストを指定します。オプションで、リンクの HTML タイトル属性を設定する title を指定することもできます。\npageRef パラメータを使用すると、Hugo コンテンツページとタクソノミーを簡単に参照できます。これは、Hugo コンテンツアイテムを参照するだけで正しいリンクが自動的に作成されるため、メニューを設定する最も簡単な方法です。外部 URL にリンクするには、url パラメータを使用できます。\npre パラメータを使用すると、Blowfish のアイコンセットからメニューエントリにアイコンを配置できます。このパラメータは、name パラメータと組み合わせて使用することも、単独で使用することもできます。アイコンのみを使用して複数のメニューエントリを使用する場合は、identifier パラメータを設定してください。そうしないと、Hugo はデフォルトで命名タグを ID として使用し、おそらくすべてのメニューエントリを表示しません。\nメニューリンクは、weight が低い順に並べ替えられ、次に name でアルファベット順に並べ替えられます。\nどちらのメニューも完全にオプションであり、不要な場合はコメントアウトできます。ファイルに記載されているテンプレートをガイドとして使用してください。\nネストされたメニュー # テーマはネストされたメニューもサポートしています。これらを使用するには、menu.toml で親エントリを定義し、parent パラメータを使用し親を参照してサブメニューを定義するだけです。すべてのプロパティは、サブメニューに使用できます。pageRef と url は、親エントリでも使用できます。ネストされたメニューは、メインメニューでのみ使用でき、フッターでは使用できません。\n# config/_default/menus.ja.toml [[main]] name = \u0026#34;親\u0026#34; weight = 20 [[main]] name = \u0026#34;サブメニュー 1\u0026#34; parent = \u0026#34;親\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;サブメニュー 2\u0026#34; parent = \u0026#34;親\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;サブメニュー 3\u0026#34; parent = \u0026#34;親\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 サブナビゲーションメニュー # さらに、サブナビゲーションメニューを設定することもできます。menus.toml で新しいメニューエントリを subnavigation として定義するだけです。 これにより、メインヘッダーメニューの下に、サブカテゴリを含む2行目が表示されます。\n# config/_default/menus.ja.toml [[subnavigation]] name = \u0026#34;興味深いトピック\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;私の素晴らしいカテゴリ\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 デフォルトの name は、pageRef のタイトルになります。\nサムネイルと背景 # Blowfish は、記事に視覚的なサポートを簡単に追加できるように構築されました。Hugo の記事構造に慣れている場合は、記事フォルダ内に feature* で始まる画像ファイル (ほとんどすべての形式がサポートされていますが、.png または .jpg を推奨) を配置するだけです。それだけで、Blowfish はその画像をウェブサイト内のサムネイルとして使用したり、ソーシャルプラットフォーム全体の oEmbed カードに使用したりできるようになります。\n詳細な情報と、設定方法を確認するためのサンプルを含むガイドもこちらにあります。\nさらに、Blowfish は記事やリストの背景ヒーロー画像もサポートしています。フィーチャー画像とは異なる画像を使用するには、名前が background* で始まる画像ファイルを（記事フォルダに）追加します。\n詳細設定 # 上記の手順は、最低限の設定です。hugo server を実行すると、空の Blowfish ウェブサイトが表示されます。詳細な設定については、設定セクションで説明しています。\n","externalUrl":null,"permalink":"/ja/docs/getting-started/","section":"ドキュメント","summary":"","title":"始める","type":"docs"},{"content":"Blowfish は高度にカスタマイズ可能なテーマであり、最新の Hugo 機能を使用して設定方法をシンプルにしています。\nこのテーマには、基本的なブログまたは静的サイトをすぐに立ち上げて実行できるデフォルト設定が付属しています。\nBlowfish を簡単に使い始められるように、新しい CLI ツールをリリースしました。インストールと設定に役立ちます。 グローバルに CLI ツールをインストールするには、以下を使用します。\nnpx blowfish-tools テーマにバンドルされている設定ファイルは、デフォルトの Hugo 構文である TOML 形式で提供されています。必要に応じて、設定を YAML または JSON に変換できます。\nデフォルトのテーマ設定は各ファイルに記載されているため、必要に応じて設定を自由に調整できます。\nインストール手順で概説されているように、Hugo プロジェクトの config/_default/ フォルダ内のファイルを修正し、プロジェクトルートの config.toml ファイルを削除することで、テーマ設定を調整する必要があります。 サイト設定 # テーマ全体で標準の Hugo 設定変数が適用されますが、最適なエクスペリエンスを得るために設定する必要がある特定の事項があります。\nサイト設定は config/_default/config.toml ファイルで管理されます。 下の表は、Blowfish が活用するすべての設定の概要を示しています。\nこの表で提供されている変数名は、TOML データ構造を簡素化するためにドット表記を使用していることに注意してください（つまり、 outputs.home は [outputs] home を指します）。\n名前 デフォルト 説明 theme \u0026quot;blowfish\u0026quot; Hugo Modules を使用している場合は、この設定値を削除する必要があります。 他のすべてのインストールタイプでは、テーマが機能するためにこれを blowfish に設定する必要があります。 baseURL 未設定 ウェブサイトのルートへの URL です。 defaultContentLanguage \u0026quot;en\u0026quot; この値は、テーマコンポーネントとコンテンツのデフォルト言語を決定します。 サポートされている言語コードについては、以下の言語と i18n セクションを参照してください。 enableRobotsTXT true 有効にすると、検索エンジンがサイト全体をクロールできるようにする robots.txt ファイルがサイトルートに作成されます。 あらかじめ作成した独自の robots.txt を提供する場合は、false に設定し、ファイルを static ディレクトリに配置します。 完全に制御するには、このファイルを生成するためのカスタムレイアウトを提供できます。 pagination.pagerSize 10 記事リストの各ページにリストされる記事の数です。 summaryLength 0 フロントマターで提供されていない場合に、記事の概要を生成するために使用される単語の数です。 値 0 は最初の文を使用します。 概要が非表示になっている場合、この値は効果がありません。 outputs.home [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] サイト用に生成される出力形式です。 Blowfish では、すべてのテーマコンポーネントが正しく機能するために HTML、RSS、JSON が必要です。 permalinks 未設定 パーマリンクの設定については、Hugo ドキュメントを参照してください。 taxonomies 未設定 分類の設定については、コンテンツの整理セクションを参照してください。 サムネイル # Blowfish は、記事に視覚的なサポートを簡単に追加できるように構築されています。Hugo の記事構造に慣れている場合は、記事フォルダ内に feature* で始まる画像ファイル（ほとんどすべての形式がサポートされていますが、.png または .jpg をお勧めします）を配置するだけです。これで、Blowfish はサイト内でサムネイルとして画像を使用したり、ソーシャルプラットフォーム全体で oEmbed カードに使用したりできます。\nこちらには、より詳細な情報と、どのように設定できるかを確認したい場合のサンプルを含むガイドもあります。\n言語と i18n # Blowfish は多言語ウェブサイト向けに最適化されており、テーマアセットはすぐに使えるように複数の言語に翻訳されています。 言語設定を使用すると、コンテンツの複数のバージョンを生成して、訪問者に母国語でカスタマイズされたエクスペリエンスを提供できます。\nこのテーマは現在、デフォルトで次の言語をサポートしています:\n言語 コード アラビア語 ar ブルガリア語 bg ベンガル語 bn カタロニア語 ca チェコ語 cs ドイツ語 de 英語 en エスペラント語 eo スペイン語（スペイン） es フィンランド語 fi フランス語 fr ヘブライ語 he クロアチア語 hr ハンガリー語 hu インドネシア語 id イタリア語 it 日本語 ja 韓国語 ko オランダ語 nl ポーランド語 pl ポルトガル語（ブラジル） pt-br ポルトガル語（ポルトガル） pt-pt ルーマニア語 ro タイ人 th ロシア語 ru トルコ語 tr ベトナム語 vi 中国語（簡体字） zh-cn 中国語（繁体字） zh-tw デフォルトの翻訳は、翻訳文字列を含むカスタムファイル i18n/[言語コード].yaml を作成することでオーバーライドできます。 この方法を使用して新しい言語を追加することもできます。 新しい翻訳をコミュニティと共有したい場合は、プルリクエストを開いてください。\n設定 # 可能な限り柔軟に対応するために、ウェブサイトの各言語の言語設定ファイルを作成する必要があります。デフォルトでは、Blowfish には config/_default/languages.en.toml に英語の言語設定が含まれています。\nデフォルトのファイルは、追加の言語を作成するためのテンプレートとして使用することも、英語以外の言語でウェブサイトを作成する場合は名前を変更することもできます。languages.[言語コード].toml 形式を使用してファイルに名前を付けるだけです。\n注: サイト設定の defaultContentLanguage パラメータが、言語設定ファイル名の言語コードと一致していることを確認してください。 グローバル # 名前 デフォルト 説明 languageCode \u0026quot;en\u0026quot; このファイルの Hugo 言語コードです。トップレベル言語（例： en）またはサブバリアント（例： en-au）にすることができ、ファイル名の言語コードと一致する必要があります。Hugo はこの値が常に小文字であることを想定しています。適切な HTML 準拠のために、大文字と小文字を区別する isoCode パラメータを設定します。 languageName \u0026quot;English\u0026quot; 言語の名前です。 weight 1 重みは、多言語サイトを構築するときの言語の順序を決定します。 title \u0026quot;Blowfish\u0026quot; ウェブサイトのタイトルです。これは、サイトのヘッダーとフッターに表示されます。 パラメーター # 名前 デフォルト 説明 params.displayName \u0026quot;EN\u0026quot; ウェブサイトに言語が表示されるときに使用される名前です。 params.isoCode \u0026quot;en\u0026quot; HTML メタデータ用の ISO 言語コードです。トップレベル言語（例： en）またはサブバリアント（例： en-AU）にすることができます。 params.rtl false これが RTL 言語かどうかです。true に設定すると、コンテンツが右から左に並べ替えられます。 Blowfish は RTL 言語と LTR 言語の同時使用を完全にサポートしており、両方に動的に調整されます。 params.dateFormat \u0026quot;2 January 2006\u0026quot; この言語での日付のフォーマット方法です。使用できる形式については、Hugo ドキュメントを参照してください。 params.logo 未設定 assets/ フォルダ内のサイトロゴファイルへの相対パスです。ロゴファイルは2倍の解像度で提供する必要があり、あらゆる画像サイズをサポートしています。 params.secondaryLogo 未設定 assets/ フォルダ内のセカンダリサイトロゴファイルへの相対パスです。 ロゴファイルは2倍の解像度で提供する必要があり、あらゆる画像サイズをサポートしています。 これは、logo とは反転/対照的なカラースキームである必要があります。設定されている場合、このロゴは、ユーザーが defaultAppearance モードから切り替えたときに表示されます。 params.description 未設定 ウェブサイトの説明です。これはサイトのメタデータで使用されます。 params.copyright 未設定 サイトフッターの著作権メッセージの Markdown 文字列には、プレースホルダ { year } を含めて現在の年を動的に挿入できます。指定されていない場合、Blowfish はサイト title を使用して著作権文字列を自動的に生成します。 著者(Author) # 名前 デフォルト 説明 author.name 未設定 著者の名前です。これは、記事のフッターと、プロフィールレイアウトが使用されている場合はホームページに表示されます。 author.image 未設定 著者の画像ファイルへのパスです。画像は縦横比 1:1 である必要があります。画像は、サイトの assets/ フォルダに配置することも、外部 URL にすることもできます。 author.headline 未設定 著者の見出しを含む Markdown 文字列です。プロフィールホームページの著者の名前に下に表示されます。 author.bio 未設定 著者の略歴を含む Markdown 文字列です。記事のフッターに表示されます。 author.links 未設定 著者の詳細と一緒に表示するリンクです。設定ファイルには、コメントを外すだけで有効になるリンクの例が含まれています。リンクが表示される順序は、配列に表示される順序によって決まります。assets/icons/ に対応する SVG アイコンアセットを提供することで、カスタムリンクを追加できます。 メニュー(Menus) # Blowfish は、言語固有のメニュー設定もサポートしています。メニュー設定ファイルは、言語ファイルと同じ命名形式に従います。ファイル名に言語コードを指定するだけで、Hugo はファイルがどの言語に関連しているかを認識します。\nメニュー設定ファイルの名前は、 menus.[language-code].toml 形式です。メニュー設定で使用される言語コードが言語設定と一致していることを常に確認してください。\nはじめにセクションでは、このファイルの構造について詳しく説明しています。詳細な設定例については、Hugo メニュー ドキュメントも参照できます。\nテーマパラメーター(Theme parameters) # Blowfish は、テーマの機能を制御する多数の設定パラメータを提供します。下の表は、config/_default/params.toml ファイルで使用可能なすべてのパラメータの概要を示しています。\nここにある記事のデフォルトの多くは、フロントマターで指定することで、記事ごとにオーバーライドできます。詳細については、フロントマターセクションを参照してください。\nグローバル # 名前 デフォルト 説明 colorScheme \u0026quot;blowfish\u0026quot; 使用するテーマのカラースキームです。有効な値は、blowfish（デフォルト）、avocado、fire、ocean、forest、princess、neon、bloody、terminal、marvel、noir、autumn、congo、slate です。詳細については、カラースキームセクションを参照してください。 defaultAppearance \u0026quot;light\u0026quot; デフォルトのテーマの外観です。light または dark のいずれかです。 autoSwitchAppearance true 訪問者のオペレーティングシステムの設定に基づいてテーマの外観を自動的に切り替えるかどうかです。false に設定すると、サイトは常に defaultAppearance を使用します。 enableSearch false サイト内検索が有効かどうかです。true に設定すると、検索機能が有効になります。検索機能は、サイト設定の outputs.home 設定が正しく設定されているかどうかに依存することに注意してください。 enableCodeCopy false \u0026lt;code\u0026gt; ブロックのクリップボードへのコピーボタンを有効にするかどうかです。コードコピーが正しく機能するには、highlight.noClasses パラメータを false に設定する必要があります。以下のその他の設定ファイルについて読んでください。 mainSections 未設定 最近の記事リストに表示するセクションです。指定しない場合は、記事数が最も多いセクションが使用されます。 showViews 未設定 記事とリストの表示回数を表示するかどうかです。これには Firebase 統合を有効にする必要があります。以下をご覧ください。 showLikes 未設定 記事とリストのいいねを表示するかどうかです。これには Firebase 統合を有効にする必要があります。以下をご覧ください。 robots 未設定 ロボットがサイトをどのように処理するかを示す文字列です。設定されている場合、ページヘッダーに出力されます。有効な値については、Google のドキュメントを参照してください。 disableImageZoom false サイト内のすべての画像の画像ズーム機能を無効にします。 disableImageOptimization false サイト内のすべての画像の画像サイズ変更と最適化機能を無効にします。Markdown 記法（例：![](image.jpg)）の画像は対象外です。 disableImageOptimizationMD false Markdown 記法（例：![](image.jpg)）の画像の画像サイズ変更と最適化機能のみを無効にします。他の画像には適用されます。 disableTextInHeader false ヘッダーのテキストを無効にします。ロゴベースのヘッダーに役立ちます。 defaultBackgroundImage 未設定 background ホームページレイアウトと background ヒーロースタイルの両方のデフォルトの背景画像です。 defaultFeaturedImage 未設定 記事全体のすべての featured 画像のデフォルトの背景画像です。ローカルの featured 画像によってオーバーライドされます。 defaultSocialImage 未設定 ソーシャルメディア共有（Open Graph と Twitter）用のデフォルト画像。ローカルの featured 画像によってオーバーライドされます。 highlightCurrentMenuArea 未設定 メインメニューのメニュー項目が選択されているときにマークを付けます。 smartTOC 未設定 スマート目次をアクティブにします。表示されている項目が強調表示されます。 smartTOCHideUnfocusedChildren 未設定 スマート目次がオンになっている場合、フォーカスされていないときに、テーブルのより深いレベルが非表示になります。 fingerprintAlgorithm \u0026quot;sha512\u0026quot; This configures the fingerprint or resources.Fingerprint used in .Data.Integrity for files provided by the theme. Valid values are sha512 (default), sha384, sha256 ヘッダー(Header) # 名前 デフォルト 説明 header.layout \u0026quot;basic\u0026quot; サイト全体のヘッダーを定義します。サポートされている値は、basic、fixed、fixed-fill、fixed-fill-blur です。 フッター(Footer) # 名前 デフォルト 説明 footer.showMenu true フッターメニューを表示/非表示にします。これは、config/_default/menus.en.toml ファイルの [[footer]] セクションで設定できます。 footer.showCopyright true サイトのフッターに著作権文字列を表示するかどうかです。文字列自体は、言語設定 の copyright パラメータを使用してカスタマイズできることに注意してください。 footer.showThemeAttribution true サイトのフッターに「powered by」というテーマの帰属を表示するかどうかです。このメッセージを無効にする場合は、サイトの他の場所（たとえば、about ページ）でテーマの帰属を検討してください。 footer.showAppearanceSwitcher false サイトのフッターに外観スイッチャーを表示するかどうかです。 ブラウザのローカルストレージを使用して、訪問者の設定が保持されます。 footer.showScrollToTop true true に設定すると、トップへスクロールの矢印が表示されます。 ホームページ(Homepage) # 名前 デフォルト 説明 homepage.layout \u0026quot;profile\u0026quot; ホームページのレイアウトです。有効な値は、page、profile、hero、card、background、custom です。custom に設定した場合、/layouts/partials/home/custom.html ファイルを作成して独自のレイアウトを提供する必要があります。詳細については、ホームページレイアウト セクションを参照してください。 homepage.homepageImage 未設定 hero レイアウトと card レイアウトで使用される画像です。アセットディレクトリからのローカル画像または外部画像 URL として設定できます。詳細については、ホームページレイアウト セクションを参照してください。 homepage.showRecent false ホームページに最近の記事リストを表示するかどうかです。 homepage.showRecentItems 5 showRecent が true の場合に表示する記事の数です。変数が0に設定されている場合、または定義されていない場合は、システムはデフォルトで5つの記事に設定されます。 homepage.showMoreLink false ユーザーを事前に定義された場所に移動する「もっと見る」リンクを投稿の最後に表示するかどうかです。 homepage.showMoreLinkDest /posts 「もっと見る」ボタンの移動先です。 homepage.cardView false 最近の記事をカードのギャラリーとして表示します。 homepage.cardViewScreenWidth false 最近の記事カードギャラリーの幅を拡張して、利用可能な幅全体を使用します。 homepage.layoutBackgroundBlur false ホームページレイアウトの背景画像をスクロールに合わせてぼかします。 homepage.disableHeroImageFilter false ホームページの背景画像にフィルターを適用するかどうか。 記事(Article) # 名前 デフォルト 説明 article.showDate true 記事の日付を表示するかどうかです。 article.showViews false 記事の表示回数を表示するかどうかです。これには Firebase 統合を有効にする必要があります。以下をご覧ください。 article.showLikes false 記事のいいねを表示するかどうかです。これには Firebase 統合を有効にする必要があります。以下をご覧ください。 article.showDateOnlyInArticle false 記事リスト/カードに表示されていない場合でも、記事内に日付を表示します。 article.showDateUpdated false 記事が更新された日付を表示するかどうかです。 article.showAuthor true 記事のフッターに著者ボックスを表示するかどうかです。 article.showAuthorBottom false 著者ボックスは、各ページの上部ではなく下部に表示されます。 article.showHero false サムネイル画像を各記事ページ内でヒーロー画像として表示するかどうかです。 article.heroStyle 未設定 ヒーロー画像を表示するスタイルです。有効なオプションは、basic、big、background、thumbAndBackground です。 article.layoutBackgroundBlur true 背景記事 heroStyle の背景画像をスクロールに合わせてぼかします。 article.layoutBackgroundHeaderSpace true ヘッダーと本文の間にスペースを追加します。 article.showBreadcrumbs false 記事のヘッダーにパンくずリストを表示するかどうかです。 article.showDraftLabel true サイトが --buildDrafts でビルドされたときに、記事の横にドラフトインジケータを表示するかどうかです。 article.showEdit false 記事コンテンツを編集するためのリンクを表示するかどうかです。 article.editURL 未設定 article.showEdit がアクティブな場合、編集リンクの URL です。 article.editAppendPath true article.showEdit がアクティブな場合、現在の記事へのパスを article.editURL で設定された URL に追加するかどうかです。 article.seriesOpened false シリーズモジュールがデフォルトで開いた状態で表示されるかどうかです。 article.showHeadingAnchors true 記事内の見出しの横にアンカーリンク見出しを表示するかどうかです。 article.showPagination true 記事のフッターに次/前の記事リンクを表示するかどうかです。 article.invertPagination false 次/前の記事リンクの方向を反転するかどうかです。 article.showReadingTime true 記事の読了時間を表示するかどうかです。 article.showTableOfContents false 記事に目次を表示するかどうかです。 article.showRelatedContent false 各投稿の関連記事を表示します。config.toml に追加の設定が必要になる場合があります。この機能を有効にする場合は、テーマの config.toml を確認し、関連するすべての related エントリをコピーしてください。また、関連記事については Hugo のドキュメント も確認してください。 article.relatedContentLimit 3 showRelatedContent がオンになっている場合に表示する関連記事の上限です。 article.showTaxonomies false この記事に関連するタクソノミーを表示するかどうかです。 article.showAuthorsBadges false authors タクソノミーを記事またはリストのヘッダーに表示するかどうかです。これには、「複数の著者」と authors タクソノミーの設定が必要です。この機能の設定方法の詳細については、このページ を確認してください。 article.showWordCount false 記事の単語数を表示するかどうかです。 article.showComments false 記事のフッターの後に コメントパーシャル を含めるかどうかです。 article.sharingLinks 未設定 各記事の最後に表示する共有リンクです。指定されていないか、false に設定されている場合、リンクは表示されません。使用可能な値は、\u0026ldquo;bluesky\u0026rdquo;、\u0026ldquo;email\u0026rdquo;、\u0026ldquo;facebook\u0026rdquo;、\u0026ldquo;line\u0026rdquo;、\u0026ldquo;linkedin\u0026rdquo;、\u0026ldquo;mastodon\u0026rdquo;、\u0026ldquo;pinterest\u0026rdquo;、\u0026ldquo;reddit\u0026rdquo;、\u0026ldquo;telegram\u0026rdquo;、\u0026ldquo;twitter\u0026rdquo;、\u0026ldquo;whatsapp\u0026quot;です。 article.showZenMode false 記事のZenモードリーダー機能を有効にするフラグです。 リスト(List) # 名前 デフォルト 説明 list.showHero false 各リストページ内でサムネイル画像をヒーロー画像として表示するかどうか。 list.heroStyle 未設定 ヒーロー画像の表示スタイル。有効なオプションは basic、big、background、thumbAndBackground です。 list.showBreadcrumbs false リストページのヘッダーにパンくずリストを表示するかどうか。 list.layoutBackgroundBlur true background リストの heroStyle の背景画像をスクロールでぼかします。 list.layoutBackgroundHeaderSpace true ヘッダーと本文の間にスペースを追加します。 list.showTableOfContents false リストページに目次を表示するかどうか。 list.showSummary false リストページに記事の要約を表示するかどうか。フロントマター で要約が提供されていない場合、サイト設定 の summaryLength パラメータを使用して自動的に生成されます。 list.showViews false リストの閲覧数を表示するかどうか。これを有効にするには、Firebase の統合を有効にする必要があります。以下をご覧ください。 list.showLikes false リストのいいね数を表示するかどうか。これを有効にするには、Firebase の統合を有効にする必要があります。以下をご覧ください。 list.showCards false 各記事をカードとして表示するか、シンプルなインラインテキストとして表示するかどうか。 list.orderByWeight false 記事を重みで並べ替えるかどうか。 list.groupByYear true リストページで記事を年別にグループ化するかどうか。 list.cardView false リストをカードのギャラリーとして表示します。 list.cardViewScreenWidth false リスト内のカードギャラリーの幅を、利用可能な全幅を使用するように拡張します。 list.constrainItemsWidth false 読みやすくするために、アイテムの幅を prose に制限します。フィーチャー画像が利用できない場合に役立ちます。 list.showTableOfContents false 記事に目次を表示するかどうか。 サイトマップ(Sitemap) # 名前 デフォルト 説明 sitemap.excludedKinds [\u0026quot;taxonomy\u0026quot;, \u0026quot;term\u0026quot;] 生成された /sitemap.xml ファイルから除外するコンテンツの種類。許容される値については、Hugo のドキュメントを参照してください。 タクソノミー(Taxonomy) # 名前 デフォルト 説明 taxonomy.showTermCount true タクソノミーリストにタクソノミー用語内の記事数を表示するかどうか。 taxonomy.showHero false 各タクソノミーページ内でサムネイル画像をヒーロー画像として表示するかどうか。 taxonomy.heroStyle 未設定 ヒーロー画像の表示スタイル。有効なオプションは basic、big、background、thumbAndBackground です。 taxonomy.showBreadcrumbs false タクソノミーのヘッダーにパンくずリストを表示するかどうか。 taxonomy.showViews false 記事の閲覧数を表示するかどうか。これを有効にするには、Firebase の統合を有効にする必要があります。以下をご覧ください。 taxonomy.showLikes false 記事のいいね数を表示するかどうか。これを有効にするには、Firebase の統合を有効にする必要があります。以下をご覧ください。 taxonomy.showTableOfContents false タクソノミーに目次を表示するかどうか。 taxonomy.cardView false リストをカードのギャラリーとして表示します。 ターム(Term) # 名前 デフォルト 説明 term.showHero false 各タームページ内でサムネイル画像をヒーロー画像として表示するかどうか。 term.heroStyle 未設定 ヒーロー画像の表示スタイル。有効なオプションは basic、big、background、thumbAndBackground です。 term.showBreadcrumbs false タームのヘッダーにパンくずリストを表示するかどうか。 term.showViews false 記事の閲覧数を表示するかどうか。これを有効にするには、Firebase の統合を有効にする必要があります。以下をご覧ください。 term.showLikes false 記事のいいね数を表示するかどうか。これを有効にするには、Firebase の統合を有効にする必要があります。以下をご覧ください。 term.showTableOfContents false タームに目次を表示するかどうか。 term.groupByYear false タームページで記事を年別にグループ化するかどうか。 term.cardView false リストをカードのギャラリーとして表示します。 term.cardViewScreenWidth false リスト内のカードギャラリーの幅を、利用可能な全幅を使用するように拡張します。 Firebase # 名前 デフォルト 説明 firebase.apiKey 未設定 Firebase との統合に必要な Firebase API キー。Firebase を Blowfish に統合する方法については、このページを参照してください。 firebase.authDomain 未設定 Firebase との統合に必要な Firebase 認証ドメイン。Firebase を Blowfish に統合する方法については、このページを参照してください。 firebase.projectId 未設定 Firebase との統合に必要な Firebase プロジェクト ID。Firebase を Blowfish に統合する方法については、このページを参照してください。 firebase.storageBucket 未設定 Firebase との統合に必要な Firebase ストレージバケット。Firebase を Blowfish に統合する方法については、このページを参照してください。 firebase.messagingSenderId 未設定 Firebase との統合に必要な Firebase メッセージング送信者 ID。Firebase を Blowfish に統合する方法については、このページを参照してください。 firebase.appId 未設定 Firebase との統合に必要な Firebase アプリ ID。Firebase を Blowfish に統合する方法については、このページを参照してください。 firebase.measurementId 未設定 Firebase との統合に必要な Firebase 測定 ID。Firebase を Blowfish に統合する方法については、このページを参照してください。 Fathom Analytics # 名前 デフォルト 説明 fathomAnalytics.site 未設定 ウェブサイト用に Fathom Analytics によって生成されたサイトコード。詳細については、Analytics のドキュメントを参照してください。 fathomAnalytics.domain 未設定 Fathom Analytics でカスタムドメインを使用している場合、ここに指定して、script.js をカスタムドメインから配信します。 Umami Analytics # 名前 デフォルト 説明 umamiAnalytics.websiteid 未設定 ウェブサイト用に Umami Analytics によって生成されたサイトコード。詳細については、Analytics のドキュメントを参照してください。 umamiAnalytics.domain 未設定 Umami Analytics でカスタムドメインを使用している場合、ここに指定して、script.js をカスタムドメインから配信します。 umamiAnalytics.dataDomains 未設定 トラッカーを特定のドメインでのみ実行したい場合は、トラッカースクリプトに指定します。これは、ドメイン名のカンマ区切りリストです。例えば \u0026ldquo;yoursite.com,yoursite2.com\u0026rdquo; のようになります。 umamiAnalytics.scriptName script.js アンチ広告ブロックに使用される script.js の名前は、環境変数 TRACKER_SCRIPT_NAME で設定されます。 umamiAnalytics.enableTrackEvent true true に設定すると、トラックイベントが自動的に追加されます。トラックイベントを追加したくない場合は、false に設定してください。 Seline Analytics # 名前 デフォルト 説明 selineAnalytics.token 未設定 ウェブサイト用に Seline Analytics によって生成されたトークン。詳細については、Analytics のドキュメントを参照してください。 selineAnalytics.enableTrackEvent true true に設定すると、トラックイベントが自動的に追加されます。トラックイベントを追加したくない場合は、false に設定してください。 BuyMeACoffee # 名前 デフォルト 説明 buymeacoffee.identifier 未設定 ターゲットの buymeacoffee アカウントの識別子。 buymeacoffee.globalWidget 未設定 グローバル buymeacoffee ウィジェットを有効にします。 buymeacoffee.globalWidgetMessage 未設定 新しいユーザーが初めてサイトにアクセスしたときに表示されるメッセージ。 buymeacoffee.globalWidgetColor 未設定 ウィジェットの色（16進数形式）。 buymeacoffee.globalWidgetPosition 未設定 ウィジェットの位置。例えば \u0026ldquo;Left\u0026rdquo; または \u0026ldquo;Right\u0026rdquo; verification # 名前 デフォルト 説明 verification.google 未設定 サイトメタデータに含まれる、Google が提供するサイト確認文字列。 verification.bing 未設定 サイトメタデータに含まれる、Bing が提供するサイト確認文字列。 verification.pinterest 未設定 サイトメタデータに含まれる、Pinterest が提供するサイト確認文字列。 verification.yandex 未設定 サイトメタデータに含まれる、Yandex が提供するサイト確認文字列。 RSSNext # 名前 デフォルト 説明 rssnext.feedId 未設定 RSSNext/Follow によって提供される rss feedId 文字列。rss.xml に含まれ、rss フィードを自身のものとしてクレームするのに役立ちます。 rssnext.userId 未設定 RSSNext/Follow によって提供される rss userId 文字列。rss.xml に含まれ、rss フィードを自身のものとしてクレームするのに役立ちます。 Advertisement # 名前 デフォルト 説明 advertisement.adsense 未設定 Google AdSense パブリッシャー ID （例：ca-pub-1234567890abcdef）。このパラメータを設定すると、サイト上で AdSense 広告が有効になります。 その他の設定ファイル # このテーマには markup.toml 設定ファイルも含まれています。このファイルには、Hugo が Blowfish で構築されたサイトを正しく生成するために重要なパラメータがいくつか含まれています。\nこのファイルが常に config ディレクトリに存在し、必要な値が設定されていることを確認してください。そうしないと、特定の機能が正しく機能せず、意図しない動作を引き起こす可能性があります。\n","externalUrl":null,"permalink":"/ja/docs/configuration/","section":"ドキュメント","summary":"","title":"設定","type":"docs"},{"content":"Blowfish は完全に柔軟なホームページレイアウトを提供します。2つのメインテンプレートから選択でき、追加設定でデザインを調整できます。または、独自のテンプレートを提供して、ホームページのコンテンツを完全に制御することもできます。\nホームページのレイアウトは、params.toml 設定ファイルの homepage.layout 設定によって制御されます。さらに、すべてのレイアウトには、最新記事のリストを含めるオプションがあります。\nプロフィールレイアウト (profile) # デフォルトのレイアウトはプロフィールレイアウトで、個人ウェブサイトやブログに最適です。画像とソーシャルプロファイルへのリンクを提供することで、著者の詳細を前面に押し出します。\n著者情報は、言語設定ファイルで提供されます。パラメータの詳細については、始めると言語設定セクションを参照してください。\nさらに、ホームページのコンテンツで提供される Markdown コンテンツはすべて、著者プロファイルの下に配置されます。これにより、ショートコードを使用して経歴やその他のカスタムコンテンツを表示するための柔軟性が向上します。\nプロフィールレイアウトを有効にするには、params.toml 設定ファイルで homepage.layout = \u0026quot;profile\u0026quot; と設定します。\nページレイアウト (page) # ページレイアウトは、Markdown コンテンツを表示する通常のコンテンツページです。静的ウェブサイトに最適で、高い柔軟性を提供します。\nページレイアウトを有効にするには、params.toml 設定ファイルで homepage.layout = \u0026quot;page\u0026quot; を設定します。\nヒーローレイアウト (hero) # ヒーローレイアウトは、プロフィールレイアウトとカードレイアウトのアイデアを組み合わせたものです。これは、サイトの著者に関する情報を表示するだけでなく、その下に Markdown をロードします。\nヒーローレイアウトを有効にするには、params.toml 設定ファイルで homepage.layout = \u0026quot;hero\u0026quot; と homepage.homepageImage を設定します。\n背景レイアウト (background) # 背景レイアウトは、ヒーローレイアウトをより滑らかにしたバージョンです。ヒーローレイアウトと同様に、サイトの著者に関する情報を表示し、その下に Markdown をロードします。\n背景レイアウトを有効にするには、params.toml 設定ファイルで homepage.layout = \u0026quot;background\u0026quot; と homepage.homepageImage を設定します。\nカードレイアウト (card) # カードレイアウトは、ページレイアウトの拡張版です。Markdown コンテンツも表示することで同じレベルの柔軟性を提供し、ビジュアルコンテンツを表示するためのカード画像も追加します。\nカードレイアウトを有効にするには、params.toml 設定ファイルで homepage.layout = \u0026quot;card\u0026quot; と homepage.homepageImage を設定します。\nカスタムレイアウト # 組み込みのホームページレイアウトがニーズに合わない場合は、独自のカスタムレイアウトを提供するオプションがあります。これにより、ページコンテンツを完全に制御でき、基本的に作業するための白紙の状態が得られます。\nカスタムレイアウトを有効にするには、params.toml 設定ファイルで homepage.layout = \u0026quot;custom\u0026quot; を設定します。\n設定値を設定したら、新しい custom.html ファイルを作成し、layouts/partials/home/custom.html に配置します。これで、custom.html ファイルの内容がサイトのホームページのコンテンツ領域に配置されます。レイアウトを定義するために、HTML、Tailwind、または Hugo テンプレート関数を自由に使用できます。\nカスタムレイアウトに最新記事を含めるには、recent-articles/main.html パーシャルを使用します。\n例として、このサイトのホームページでは、カスタムレイアウトを使用して、プロフィールレイアウトとページレイアウトを切り替えています。動作を確認するには、GitHub リポジトリにアクセスしてください。\n最新記事 # すべてのホームページレイアウトには、メインページコンテンツの下に最新記事を表示するオプションがあります。これを有効にするには、params.toml 設定ファイルで homepage.showRecent 設定を true に設定するだけです。\nこのセクションにリストされている記事は、mainSections 設定から派生したもので、ウェブサイトで使用しているコンテンツタイプを指定できます。たとえば、posts と projects のコンテンツセクションがある場合、この設定を [\u0026quot;posts\u0026quot;, \u0026quot;projects\u0026quot;] に設定すると、これら2つのセクションのすべての記事が最新リストに表示されます。テーマはこの設定を配列として想定しているため、すべてのコンテンツに1つのセクションのみを使用する場合は、それに応じて設定する必要があります: [\u0026quot;blog\u0026quot;]。\nサムネイル # Blowfish は、記事にビジュアルサポートを簡単に追加できるように構築されています。Hugo の記事構造に慣れている場合は、記事フォルダ内に feature* で始まる画像ファイル (ほとんどすべての形式がサポートされていますが、.png または .jpg を推奨) を配置するだけです。それだけで、Blowfish はその画像をサイト内のサムネイルとして使用したり、ソーシャルプラットフォーム全体の oEmbed カードに使用したりできるようになります。\n詳細情報と例を確認したい場合は、こちらにガイドがあります。\nカードギャラリー # Blowfish は、記事の標準リストをカードギャラリーとして表示することもサポートしています。これは、ホームページの最新セクションとサイト全体の記事リストの両方で設定できます。ホームページの場合は homepage.cardView と homepage.cardViewScreenWidth を使用し、リストの場合は list.cardView と list.cardViewScreenWidth を使用します。詳細については、設定ドキュメントを確認し、ライブデモについてはホームページを確認してください。\n","externalUrl":null,"permalink":"/ja/docs/homepage-layout/","section":"ドキュメント","summary":"","title":"ホームページレイアウト","type":"docs"},{"content":"デフォルトの Hugo ショートコードに加えて、Blowfish は機能拡張のためにいくつか独自のものを追加しています。\nアラート # alert ショートコードを使うと、記事の中にスタイリッシュなメッセージボックスを表示できます。読者に見逃してほしくない重要な情報を目立たせるのに便利です。\nパラメータ 説明 icon オプション 左端に表示するアイコン。\nデフォルト: exclamation triangle icon (アイコンの使用方法の詳細については、アイコンショートコードをご覧ください。) iconColor オプション 基本的な CSS スタイルのアイコンの色。\nHEX値 (#FFFFFF) または色の名前 (white) のいずれかで指定できます。\nデフォルトでは、現在のカラースキームに基づいて選択されます。 cardColor オプション 基本的な CSS スタイルのカードの背景色。\nHEX値 (#FFFFFF) または色の名前 (white) のいずれかを指定できます。\nデフォルトでは、現在のカラースキームに基づいて選択されます。 textColor オプション 基本的な CSS スタイルのテキストの色。\nHEX値 (#FFFFFF) または色の名前 (white) のいずれかを指定できます。\nデフォルトでは、現在のカラースキームに基づいて選択されます。 入力は Markdown で記述されているため、自由にフォーマットできます。\n例1: パラメータなし\n{{\u0026lt; alert \u0026gt;}} **警告!** この行為は破壊的です! {{\u0026lt; /alert \u0026gt;}} 警告! この行為は破壊的です! 例2: 名前なしパラメータ\n{{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Twitter で私を[フォロー](https://twitter.com/nunocoracao)するのを忘れないでください。 {{\u0026lt; /alert \u0026gt;}} Twitter で私をフォローするのを忘れないでください。 例3: 名前付きパラメータ\n{{\u0026lt; alert icon=\u0026#34;fire\u0026#34; cardColor=\u0026#34;#e63946\u0026#34; iconColor=\u0026#34;#1d3557\u0026#34; textColor=\u0026#34;#f1faee\u0026#34; \u0026gt;}} これはエラーです! {{\u0026lt; /alert \u0026gt;}} これはエラーです! 記事 # Article は、1つの記事を Markdown ファイルに埋め込みます。埋め込むファイルへの link は、埋め込むファイルの .RelPermalink である必要があります。ショートコードは、親を参照している場合は何も表示しないことに注意してください。注: Blowfish (/blowfish/ など) のようなサブフォルダでウェブサイトを実行している場合は、そのパスをリンクに含めてください。\nパラメータ 説明 link 必須 ターゲット記事への .RelPermalink。 例:\n{{\u0026lt; article link=\u0026#34;/docs/welcome/\u0026#34; \u0026gt;}} Welcome to Blowfish 3 分 New Docs バッジ # badge は、メタデータを表示するのに役立つ、スタイリッシュなバッジを出力します。\n例:\n{{\u0026lt; badge \u0026gt;}} 新しい記事! {{\u0026lt; /badge \u0026gt;}} 新しい記事! ボタン # button は、主要なアクションを強調するために使用できる、スタイリッシュなボタンコンポーネントを出力します。リンクの URL、ターゲット、および関係を指定するために使用できる、3 つのオプション変数 href、target、rel があります。\n例:\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} アクションを呼び出す {{\u0026lt; /button \u0026gt;}} アクションを呼び出す カルーセル # carousel は、複数の画像をインタラクティブで魅力的に表示するために使用されます。これにより、ユーザーは画像1枚分の縦方向のスペースのみを使って、複数の画像をスライドさせながら表示できます。すべての画像は、親コンポーネントの幅いっぱいに表示され、16:9、21:9、または 32:9 の事前に決められたアスペクト比のいずれかを使用して表示されます。\nパラメータ 説明 images 必須 画像名または URL に一致する正規表現文字列。 aspectRatio オプション カルーセルのアスペクト比。16-9、21-9、または 32-9 のいずれか。デフォルトでは 16-9 に設定されています。 interval オプション 自動スクロールの間隔。ミリ秒単位で指定します。デフォルトは 2000 (2秒) です。 例1: 16:9 のアスペクト比と冗長な画像のリスト\n{{\u0026lt; carousel images=\u0026#34;{https://cdn.pixabay.com/photo/2016/12/11/12/02/mountains-1899264_960_720.jpg, gallery/03.jpg, gallery/01.jpg, gallery/02.jpg, gallery/04.jpg}\u0026#34; \u0026gt;}} Previous Nextsads 例2: 21:9 のアスペクト比と正規表現による画像のリスト\n{{\u0026lt; carousel images=\u0026#34;gallery/*\u0026#34; aspectRatio=\u0026#34;21-9\u0026#34; interval=\u0026#34;2500\u0026#34; \u0026gt;}} Previous Nextsads チャート # chart は Chart.js ライブラリを使用して、シンプルな構造化データを使用して記事にチャートを埋め込みます。さまざまなチャートスタイルをサポートしており、すべてをショートコード内から設定できます。ショートコードタグの間にチャートパラメータを指定するだけで、Chart.js が残りの処理を行います。\n構文とサポートされているチャートタイプの詳細については、公式 Chart.js ドキュメントを参照してください。\n例:\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;トマト\u0026#39;, \u0026#39;ブルーベリー\u0026#39;, \u0026#39;バナナ\u0026#39;, \u0026#39;ライム\u0026#39;, \u0026#39;オレンジ\u0026#39;], datasets: [{ label: \u0026#39;# 投票数\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} チャートのサンプルページで、Chart.js の他の例を見ることができます。\nコードインポーター # このショートコードは、コピーアンドペーストせずに外部ソースから簡単にコードをインポートするためのものです。\nパラメータ 説明 url 必須 外部でホストされているコードファイルへの URL。 type 構文の強調表示に使用されるコードタイプ。 startLine オプション インポートを開始する行番号。 endLine オプション インポートを終了する行番号。 例:\n{{\u0026lt; codeimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/blowfish/main/layouts/shortcodes/mdimporter.html\u0026#34; type=\u0026#34;go\u0026#34; \u0026gt;}} {{ $url := .Get \u0026#34;url\u0026#34; }} {{ with resources.GetRemote (urls.Parse $url) }} {{ .Content | markdownify }} {{ else }} {{ errorf \u0026#34;Mardown Importer Shortcode - Unable to get remote resource\u0026#34; . }} {{ end }} {{\u0026lt; codeimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/blowfish/main/config/_default/hugo.toml\u0026#34; type=\u0026#34;toml\u0026#34; startLine=\u0026#34;11\u0026#34; endLine=\u0026#34;18\u0026#34; \u0026gt;}} enableRobotsTXT = true summaryLength = 0 buildDrafts = false buildFuture = false enableEmoji = true Codeberg カード # codeberg を使用すると、Codeberg API を介して Codeberg リポジトリをすばやくリンクでき、スターやフォークなどの統計に関するリアルタイムの更新を提供できます。\nパラメータ 説明 repo [文字列] username/repo 形式の Codeberg リポジトリ 例1:\n{{\u0026lt; codeberg repo=\u0026#34;forgejo/forgejo\u0026#34; \u0026gt;}} \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e forgejo/forgejo Beyond coding. We forge. Go 2450 419 Figure # Blowfish には、コンテンツに画像を追加するための figure ショートコードが含まれています。このショートコードは、追加のパフォーマンス上の利点を提供するために、基本の Hugo 機能を置き換えます。\n提供された画像がページリソースである場合、Hugo Pipes を使用して最適化され、さまざまなデバイス解像度に適した画像を提供するために拡大縮小されます。静的アセットまたは外部画像への URL が提供された場合、Hugo による画像処理なしにそのまま含まれます。\nfigure ショートコードは、6つのパラメータを受け付けます。\nパラメータ 説明 src 必須 画像のローカルパス/ファイル名または URL。パスとファイル名を指定すると、テーマは次の優先順位を使用して画像の特定を試みます。まず、ページにバンドルされたページリソースとして、次に assets/ ディレクトリ内のアセット、最後に static/ ディレクトリ内の静的画像。 alt 画像の代替テキスト。 caption 画像の下に表示される画像キャプションの Markdown。 class 画像に適用する追加の CSS クラス。 href 画像をリンクする URL。 target href URL のターゲット属性。 nozoom nozoom=true は、画像の「ズーム」機能を無効にします。これは、href リンクと組み合わせて使用​​するのが最も役立ちます。 default Hugoのデフォルトの figure の動作に戻すための特別なパラメータ。default=true を指定し、通常の Hugo ショートコード構文を使用します。 Blowfish も、標準の Markdown 構文を使用して含まれる画像の自動変換もサポートしています。次の形式を使用するだけで、テーマが処理してくれます。\n![代替テキスト](image.jpg \u0026#34;画像キャプション\u0026#34;) 例:\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;抽象的な紫のアートワーク\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- または --\u0026gt; ![抽象的な紫のアートワーク](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash Forgejo カード # forgejo を使用すると、forgejo API を介して Forgejo リポジトリをすばやくリンクでき、スターやフォークなどの統計をリアルタイムで更新できます。\nパラメータ 説明 repo [文字列] username/repo 形式の forgejo リポジトリ server [文字列] https://v11.next.forgejo.org のようなサーバー URL 例1:\n{{\u0026lt; forgejo server=\u0026#34;https://v11.next.forgejo.org\u0026#34; repo=\u0026#34;a/mastodon\u0026#34; \u0026gt;}} a/mastodon Your self-hosted, globally interconnected microblogging community Ruby 0 0 ギャラリー # gallery を使用すると、複数の画像を一度に、レスポンシブな方法で、より多様で興味深いレイアウトで紹介できます。\nギャラリーに画像を追加するには、各画像に img タグを使用し、ギャラリーが各画像の列幅を識別できるように class=\u0026quot;grid-wXX\u0026quot; を追加します。デフォルトで使用可能な幅は 10% から始まり、5% 刻みで最大 100% までです。たとえば、幅を 65% に設定するには、クラスを grid-w65 に設定します。さらに、3列のギャラリーを構築するために、33% と 66% の幅も使用できます。また、tailwind +のレスポンシブインジケーターを活用して、レスポンシブグリッドを作成することもできます。\n例1: 通常のギャラリー\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} 例2: レスポンシブギャラリー\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} Gist # gistショートコードは、Gistのユーザー名、ID、必要に応じて特定のファイル名を指定することで、GitHub Gistをコンテンツに直接埋め込むことができます。\nパラメーター 説明 [0] [文字列] GitHubのユーザー名 [1] [文字列] GistのID [2]（オプション） [文字列] Gist内で埋め込む特定のファイル名（オプション） 例1：Gist全体を埋め込む\n{{\u0026lt; gist \u0026#34;octocat\u0026#34; \u0026#34;6cad326836d38bd3a7ae\u0026#34; \u0026gt;}} 例2：Gistの特定ファイルを埋め込む\n{{\u0026lt; gist \u0026#34;rauchg\u0026#34; \u0026#34;2052694\u0026#34; \u0026#34;README.md\u0026#34; \u0026gt;}} Gitea カード # gitea を使用すると、gitea API を介して Gitea リポジトリをすばやくリンクでき、スターやフォークなどの統計に関するリアルタイムに更新できます。\nパラメータ 説明 repo [文字列] username/repo 形式の gitea リポジトリ server [文字列] https://git.fsfe.org のようなサーバー URL 例1:\n{{\u0026lt; gitea server=\u0026#34;https://git.fsfe.org\u0026#34; repo=\u0026#34;FSFE/fsfe-website\u0026#34; \u0026gt;}} FSFE/fsfe-website Source files of fsfe.org, pdfreaders.org, freeyourandroid.org, ilovefs.org, drm.info, and test.fsfe.org. Contribute: https://fsfe.org/contribute/web/ HTML 31 90 GitHub カード # github を使用すると、github リポジトリをすばやくリンクでき、スター数やフォーク数などの統計情報をリアルタイムで表示および更新できます。\nパラメータ 説明 repo [文字列] username/repo 形式の github リポジトリ 例1:\n{{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 2105 561 GitLab カード # gitlab を使用すると、GitLab プロジェクト (リポジトリの GitLab 用語) をすばやくリンクできます。 スター数やフォーク数などのリアルタイムの統計情報を表示します。 github とは異なり、プロジェクトの主要なプログラミング言語を表示することはできません。 最後に、api/v4/projects/ エンドポイントが利用可能である限り、カスタム GitLab インスタンス URL を指定できるため、このショートコードはほとんどのセルフホスト/エンタープライズデプロイメントと互換性があります。\nパラメータ 説明 projectID [文字列] GitLab の数値 ProjectID baseURL [文字列] オプションの GitLab インスタンス URL。デフォルトは https://gitlab.com/ 例1:\n{{\u0026lt; gitlab projectID=\u0026#34;278964\u0026#34; \u0026gt;}} GitLab.org / GitLab GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider. 5621 11180 アイコン # icon は SVG アイコンを出力し、アイコン名を唯一のパラメータとして受け取ります。アイコンは、現在のテキストサイズに合わせてスケーリングされます。\n例:\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} 出力: アイコンは Hugo パイプラインを使用して設定されるため、非常に柔軟です。Blowfish には、ソーシャル、リンク、その他の目的のための組み込みアイコンが多数含まれています。サポートされているアイコンの完全なリストについては、アイコンのサンプルページを確認してください。\nカスタムアイコンは、プロジェクトの assets/icons/ ディレクトリに独自のアイコンアセットを提供することで追加できます。その後、.svg 拡張子なしで SVG ファイル名を使用して、ショートコードでアイコンを参照できます。\nアイコンは、アイコンパーシャルを呼び出すことで、パーシャルでも使用できます。\nKaTeX # katex ショートコードを使用すると、KaTeX パッケージを使用して記事のコンテンツに数式を追加できます。利用可能な構文については、サポートされている TeX 関数のオンラインリファレンスを参照してください。\n記事に数式を含めるには、コンテンツを含むショートコードを任意の場所に配置するだけです。記事ごとに1回だけ含める必要があり、KaTeX はそのページのマークアップを自動的にレンダリングします。インライン表記とブロック表記の両方がサポートされています。\nインライン表記は、式を \\( と \\) デリミタで囲むことで生成できます。また、ブロック表記は $$ デリミタを使用して生成できます。\n例:\n{{\u0026lt; katex \u0026gt;}} \\(f(a,b,c) = (a^2+b^2+c^2)^3\\) \\(f(a,b,c) = (a^2+b^2+c^2)^3\\)\n数式表記のサンプルページで、その他の例を確認できます。\nキーワード # keyword コンポーネントは、特定の重要な単語やフレーズ、例えばプロフェッショナルスキルなどを視覚的に強調表示するために使用できます。keywordList ショートコードは、複数の keyword アイテムをグループ化するために使用できます。各アイテムには、次のプロパティを設定できます。\nパラメータ 説明 icon キーワードで使用するオプションのアイコン 入力は Markdown で記述されているため、自由にフォーマットできます。\n例1 :\n{{\u0026lt; keyword \u0026gt;}} *スーパー* スキル {{\u0026lt; /keyword \u0026gt;}} スーパー スキル 例2 :\n{{\u0026lt; keywordList \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;github\u0026#34; \u0026gt;}} Lorem ipsum dolor. {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;code\u0026#34; \u0026gt;}} **大事な** スキル {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; /keywordList \u0026gt;}} {{\u0026lt; keyword \u0026gt;}} *スタンドアロン* スキル {{\u0026lt; /keyword \u0026gt;}} Lorem ipsum dolor 大事な スキル スタンドアロン スキル リード文 # lead は、記事の冒頭を強調するために使用されます。導入部分をスタイルしたり、重要な情報を呼び出したりするために使用できます。Markdown コンテンツを lead ショートコードで囲むだけです。\n例:\n{{\u0026lt; lead \u0026gt;}} ピンチはチャンス。 {{\u0026lt; /lead \u0026gt;}} ピンチはチャンス。 リスト # List は、最近の記事のリストを表示します。このショートコードには、リストを制限するための制限値が必要です。さらに、記事をパラメータでフィルタリングするために、where と value をサポートしています。このショートコードは、その親ページを表示しませんが、制限値にはカウントされることに注意してください。\nパラメータ 説明 limit 必須 表示する最近の記事の数。 title オプションのリストのタイトル。デフォルトは Recent です。 cardView オプションのカードビュー。リストに対して有効化されます。デフォルトは false です。 where 記事のクエリに使用される変数。例: Type value where で定義されたパラメータに一致する必要がある値。記事のクエリに使用されます。例: where == Type の場合、有効な値は sample です。 where と value の値は、ショートコードのコードで次のクエリ where .Site.RegularPages $where $value で使用されます。使用可能なパラメータの詳細については、Hugo ドキュメントを確認してください。 例 #1:\n{{\u0026lt; list limit=2 \u0026gt;}} 最近の記事 Blowfish へようこそ 1 分 New Docs インストール 2 分 Installation Docs 例 #2:\n{{\u0026lt; list title=\u0026#34;サンプル\u0026#34; cardView=true limit=6 where=\u0026#34;Type\u0026#34; value=\u0026#34;sample\u0026#34; \u0026gt;}} サンプル 複数の著者 1 分 Nuno Coração ,\u0026nbsp; 2人目のダミー作者 Authors Sample サムネイル 1 分 Thumbnail Sample アイコン 1 分 Icons Sample Shortcodes Markdown 2 分 Markdown Css Html Sample リッチコンテンツ 1 分 Shortcodes Privacy Sample Gist Twitter Youtube Vimeo 代用語文 更新日: 2022年1月24日\u0026middot;2 分 Markdown Text Sample Latin LTR/RTL # ltr と rtl を使用すると、それぞれのコンテンツを混在させることができます。多くの RTL 言語ユーザーは、コンテンツの一部に LTR を含めたいと考えています。このショートコードを使用するとそれを行うことができ、Hugo ショートコードの最も外側の要素として % を活用することで、内部のマークダウンは通常どおりレンダリングされます。\n例:\n- これは Markdown のリストです。 - デフォルトでは LTR 方向です。 {{% rtl %}} - هذه القائمة باللغة العربية - من اليمين الى اليسار {{% /rtl %}} これは Markdown のリストです。 デフォルトでは LTR 方向です。 هذه القائمة باللغة العربية من اليمين الى اليسار Markdown インポーター # このショートコードを使用すると、外部のソースからマークダウンファイルをインポートできます。これは、コンテンツをコピー\u0026amp;ペーストすることなく、他のリポジトリやウェブサイトからコンテンツを含めるのに役立ちます。\nパラメータ 説明 url 必須 外部でホストされている Markdown ファイルへの URL。 例:\n{{\u0026lt; mdimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/nunocoracao/master/README.md\u0026#34; \u0026gt;}} Hi there 👋 # 🐳 Principal Product Manager @ Docker 🐡 Creator and maintainer of Blowfish @ Blowfish page 🚀 Personal blog - n9o.xyz 📚 mentoring @ mentorcruise Mermaid # mermaid を使用すると、テキストを使用して詳細な図や視覚化を描画できます。内部で Mermaid を使用し、さまざまな図、チャート、その他の出力形式をサポートしています。\nmermaid ショートコード内に Mermaid 構文を記述するだけで、プラグインが残りの処理を行います。\n構文とサポートされている図の種類の詳細については、公式 Mermaid ドキュメントを参照してください。\n例:\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[レモン]--\u0026gt;B[レモネード]; B--\u0026gt;C[利益] {{\u0026lt; /mermaid \u0026gt;}} graph LR; A[レモン]--\u003eB[レモネード]; B--\u003eC[利益] 図とフローチャートのサンプルページで、Mermaid の追加の例を見ることができます。\n色の見本 # swatches は、カラーパレットなどのカラー要素を紹介するために、最大3つの異なる色のセットを出力します。このショートコードは、各色の HEX コードを受け取り、それぞれの視覚要素を作成します。\n例\n{{\u0026lt; swatches \u0026#34;#64748b\u0026#34; \u0026#34;#3b82f6\u0026#34; \u0026#34;#06b6d4\u0026#34; \u0026gt;}} 出力 タイムライン # timeline は、さまざまなユースケース (例: 職務経歴、プロジェクトの成果など) で使用できる視覚的なタイムラインを作成します。timeline ショートコードは、メインタイムライン内の各アイテムを定義するために timelineItem サブショートコードに依存しています。各アイテムには、次のプロパティを設定できます。\nパラメータ 説明 icon タイムラインのビジュアルで使用するアイコン header 各エントリのヘッダーー badge 右上のバッジ内に配置するテキスト subheader エントリのサブヘッダー 例:\n{{\u0026lt; timeline \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;github\u0026#34; header=\u0026#34;ヘッダー\u0026#34; badge=\u0026#34;バッジテスト\u0026#34; subheader=\u0026#34;サブヘッダー\u0026#34; \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;もう1つの素晴らしいヘッダー\u0026#34; badge=\u0026#34;日付 - 現在\u0026#34; subheader=\u0026#34;素晴らしいサブヘッダー\u0026#34; \u0026gt;}} HTML コード付き \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;コーヒー\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;紅茶\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;牛乳\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;star\u0026#34; header=\u0026#34;ショートコード\u0026#34; badge=\u0026#34;素晴らしい\u0026#34; \u0026gt;}} 他のショートコード付き {{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;もう1つの素晴らしいヘッダー\u0026#34;\u0026gt;}} {{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; /timeline \u0026gt;}} ヘッダー バッジテスト サブヘッダー Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. もう1つの素晴らしいヘッダー 日付 - 現在 素晴らしいサブヘッダー HTML コード付き コーヒー 紅茶 牛乳 ショートコード 素晴らしい 他のショートコード付き もう1つの素晴らしいヘッダー nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 2105 561 TypeIt # TypeIt は、この地球上で最も用途の広い、タイプライターエフェクトを作成するための JavaScript ツールです。簡単な設定で、行を分割したり、相互に削除および置換したりする単一または複数の文字列を入力でき、複雑な HTML を含む文字列も処理できます。\nBlowfish は、shortcode を使用して TypeIt 機能のサブセットを実装しています。typeit ショートコード内にテキストを記述し、次のパラメータを使用して、必要な動作を設定します。\nパラメータ 説明 tag [文字列] 文字列のレンダリングに使用される html タグ。 classList [文字列] html 要素に適用する css クラスのリスト。 initialString [文字列] 書き込まれて表示され、置き換えられる初期文字列。 speed [数値] 各ステップ間のミリ秒単位で測定されるタイピング速度。 lifeLike [ブール値] 実際の人間が行っているかのように、タイピングのペースを不規則にします。 startDelay [数値] プラグインが初期化されてからタイピングを開始するまでの時間。 breakLines [ブール値] 複数の文字列が互いに上に印刷されるか (true)、削除されて互いに置き換えられるか (false)。 waitUntilVisible [ブール値] インスタンスがロードされたときに開始するか、ターゲット要素がビューポートに表示されたときにのみ開始するかを決定します。デフォルトは true です。 loop [ブール値] 文字列が完了後に継続的にループするかどうか。 例1:\n{{\u0026lt; typeit \u0026gt;}} Lorem ipsum dolor sit amet {{\u0026lt; /typeit \u0026gt;}} 例2:\n{{\u0026lt; typeit tag=h1 lifeLike=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} 例3:\n{{\u0026lt; typeit tag=h3 speed=50 breakLines=false loop=true \u0026gt;}} \u0026#34;正直言って、俺の知ったこっちゃない。\u0026#34; 風と共に去りぬ (1939) \u0026#34;イヤとは言わせない。\u0026#34; ゴッドファーザー (1972) \u0026#34;トト、私たちもうカンザスにいないみたい。\u0026#34; オズの魔法使い (1939) {{\u0026lt; /typeit \u0026gt;}} Youtube Lite # lite-youtube-embed ライブラリを使用して YouTube 動画を埋め込むためのショートカット。このライブラリは、標準の YouTube 埋め込みの軽量な代替手段であり、より高速で効率的になるように設計されています。\nパラメータ 説明 id [文字列] 埋め込む YouTube 動画の ID。 label [文字列] 動画のラベル params [文字列] 動画再生のための追加パラメータ 例1:\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; \u0026gt;}} 例2:\n以下に示すように、params 変数に Youtube のすべてのプレーヤーパラメータを使用できます。\nこの動画は130秒(2分10秒)後に開始されます。\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; params=\u0026#34;start=130\u0026#34; \u0026gt;}} この動画には UI コントロールがなく、130秒後に再生が開始され、10秒後に停止します。\n以下に示すように複数のオプションを連結するには、それらの間に \u0026amp; 文字を追加する必要があります。\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; params=\u0026#34;start=130\u0026amp;end=10\u0026amp;controls=0\u0026#34; \u0026gt;}} 詳細については、youtubeLite GitHub リポジトリおよび Youtube のプレーヤーパラメータページを参照してください。\n","externalUrl":null,"permalink":"/ja/docs/shortcodes/","section":"ドキュメント","summary":"","title":"ショートコード","type":"docs"},{"content":"デフォルトの Hugo フロントマターパラメータに加えて、Blowfish は個々の記事の表示をカスタマイズするための追加オプションを多数用意しています。利用可能なテーマのフロントマターパラメータをすべて以下に示します。\nフロントマターパラメータのデフォルト値は、テーマの基本設定から継承されるため、デフォルトを上書きしたい場合にのみ、フロントマターでこれらのパラメータを指定する必要があります。\n名前 デフォルト 説明 title 未設定 記事の名前。 description 未設定 記事のテキスト説明。HTML メタデータで使用されます。 externalUrl 未設定 この記事がサードパーティのウェブサイトで公開されている場合、この記事への URL。URL を指定すると、コンテンツページの生成が妨げられ、この記事への参照はすべてサードパーティのウェブサイトに直接リンクされます。 editURL article.editURL showEdit がアクティブな場合の、編集リンクの URL。 editAppendPath article.editAppendPath showEdit がアクティブな場合、現在の記事へのパスを editURL で設定された URL に追加するかどうか。 groupByYear list.groupByYear リストページで記事を年別にグループ化するかどうか。 menu 未設定 値を指定すると、この記事へのリンクが名前付きメニューに表示されます。有効な値は main または footer です。 robots 未設定 ロボットがこの記事をどのように処理するかを示す文字列。設定されている場合、ページヘッドに出力されます。有効な値については、Google のドキュメントを参照してください。 sharingLinks article.sharingLinks この記事の最後に表示する共有リンク。指定されていない場合、または false に設定されている場合、リンクは表示されません。 showAuthor article.showAuthor 記事のフッターにデフォルトの著者の著者ボックスを表示するかどうか。 showAuthorBottom article.showAuthorBottom 著者ボックスは、各ページの上部ではなく下部に表示されます。 authors 未設定 著者の値の配列。設定されている場合、ページまたはサイトの showAuthor 設定を上書きします。複数人の著者機能で使用されます。この機能の設定方法の詳細については、このページをご覧ください。 showAuthorsBadges article.showAuthorsBadges 記事またはリストヘッダーに authors タクソノミーを表示するかどうか。これには、複数人の著者 と authors タクソノミーの設定が必要です。この機能の設定方法の詳細については、このページをご覧ください。 featureimage 未設定 フィーチャー画像の外部 URL。 featureimagecaption 未設定 フィーチャー画像のキャプション。heroStyle big でのみ表示されます。 showHero article.showHero 記事ページ内でサムネイル画像をヒーロー画像として表示するかどうか。 heroStyle article.heroStyle ヒーロー画像の表示スタイル。有効なオプションは、basic、big、background、thumbAndBackground です。 showBreadcrumbs article.showBreadcrumbs または list.showBreadcrumbs 記事またはリストヘッダーにパンくずリストを表示するかどうか。 showDate article.showDate 記事の日付を表示するかどうか。日付は date パラメータを使用して設定されます。 showDateUpdated article.showDateUpdated 記事が更新された日付を表示するかどうか。日付は lastmod パラメータを使用して設定されます。 showEdit article.showEdit 記事コンテンツを編集するためのリンクを表示するかどうか。 showHeadingAnchors article.showHeadingAnchors この記事の見出しの横に見出しアンカーリンクを表示するかどうか。 showPagination article.showPagination 記事のフッターに次/前の記事へのリンクを表示するかどうか。 invertPagination article.invertPagination 次/前の記事へのリンクの方向を反転するかどうか。 showReadingTime article.showReadingTime 記事の閲覧時間を表示するかどうか。 showTaxonomies article.showTaxonomies この記事に関連するタクソノミーを表示するかどうか。 showTableOfContents article.showTableOfContents この記事に目次を表示するかどうか。 showWordCount article.showWordCount 記事の単語数を表示するかどうか。 showComments article.showComments 記事のフッターの後にコメントパーシャルを含めるかどうか。 showSummary list.showSummary リストページに記事の要約を表示するかどうか。 showViews article.showViews リストと詳細ビューに記事の閲覧数を表示するかどうか。これには Firebase の統合が必要です。Firebase を Blowfish に統合する方法については、このページをご覧ください。 showLikes article.showLikes リストと詳細ビューに記事のいいねを表示するかどうか。これには Firebase の統合が必要です。Firebase を Blowfish に統合する方法については、このページをご覧ください。 seriesOpened article.seriesOpened シリーズモジュールをデフォルトで開いて表示するかどうか。 series 未設定 記事が属するシリーズの配列。記事ごとに 1 つのシリーズのみを使用することをお勧めします。 series_order 未設定 シリーズ内の記事の番号。 summary summaryLength を使用して自動生成されます (サイト設定を参照) showSummary が有効な場合、この記事の要約として使用される Markdown 文字列。 xml sitemap.excludedKinds によって除外されない限り true この記事が生成された /sitemap.xml ファイルに含まれるかどうか。 layoutBackgroundBlur true background heroStyle の背景画像をスクロールでぼかします layoutBackgroundHeaderSpace true ヘッダーと本文の間にスペースを追加します ","externalUrl":null,"permalink":"/ja/docs/front-matter/","section":"ドキュメント","summary":"","title":"フロントマター","type":"docs"},{"content":"一部のウェブサイトでは、複数の著者がコンテンツを提供しているため、ウェブサイト全体で単一のデフォルト著者以上のものが必要になります。このようなユースケースのために、Blowfish では、複数著者機能を使用して著者リストを拡張できます。\nすべての後方互換性を維持するために、この機能では追加の著者の定義のみを許可し、設定ファイルを介して使用される以前の著者機能を一切変更しません。\n著者の作成 # 新しい著者を作成する最初のステップは、./data/authors に新しいフォルダを設定することです。次に、その中に新しい json ファイルを、新しい著者ごとに1つずつ追加できます。ファイルの名前は、記事で参照する際のその著者の key になります。\n例として、./data/authors 内に nunocoracao.json というファイルを作成しましょう。ファイルの内容は以下のものと同様である必要があります。name、image、bio、および social は、著者に対して現在サポートされている4つのパラメータです。これらは、設定ファイルでデフォルトの著者に対して使用できる設定を模倣しています。\n注: ソーシャルオブジェクトのキーは、テーマのアイコンの1つを取得するために使用されます。セットアップで利用可能な任意のアイコンを自由に使用してください。\n{ \u0026#34;name\u0026#34;: \u0026#34;Nuno Coração\u0026#34;, \u0026#34;image\u0026#34; : \u0026#34;img/nuno_avatar.jpg\u0026#34;, \u0026#34;bio\u0026#34;: \u0026#34;テーマ作成者\u0026#34;, \u0026#34;social\u0026#34;: [ { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/nunocoracao\u0026#34; }, { \u0026#34;twitter\u0026#34;: \u0026#34;https://twitter.com/nunocoracao\u0026#34; }, { \u0026#34;instagram\u0026#34;: \u0026#34;https://instagram.com/nunocoracao\u0026#34; }, { \u0026#34;medium\u0026#34;: \u0026#34;https://medium.com/@nunocoracao\u0026#34; }, { \u0026#34;github\u0026#34;: \u0026#34;https://github.com/nunocoracao\u0026#34; }, { \u0026#34;goodreads\u0026#34;: \u0026#34;http://goodreads.com/nunocoracao\u0026#34; }, { \u0026#34;keybase\u0026#34;: \u0026#34;https://keybase.io/nunocoracao\u0026#34; }, { \u0026#34;reddit\u0026#34;: \u0026#34;https://reddit.com/user/nunoheart\u0026#34; } ] } 記事で著者を参照する # 著者を作成したので、次のステップは1つ以上の記事でそれを参照することです。以下の例では、前のステップで作成した著者をその key を使用して参照しています。\nこれにより、json ファイルで提供されたデータを使用して追加の著者がレンダリングされます。この機能は、サイト全体に設定されたデフォルトの著者を一切変更しないため、両方を個別に制御できます。showAuthor パラメータを使用すると、デフォルトの著者を表示するかどうかを設定できます。これは、単一著者のブログの通常の使用例です。新しい authors フロントマターパラメータを使用すると、記事に固有の著者を定義でき、それらはデフォルトのサイト著者の設定とは独立してレンダリングされます。\n--- title: \u0026#34;複数の著者\u0026#34; date: 2020-08-10 draft: false description: \u0026#34;記事に複数の著者を設定する。\u0026#34; slug: \u0026#34;multi-author\u0026#34; tags: [\u0026#34;authors\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;docs\u0026#34;] showAuthor: true authors: - \u0026#34;nunocoracao\u0026#34; showAuthorsBadges : false --- この例は、現在のページの Markdown と同じもので、デフォルトの著者と新しい著者の両方が表示されます。スクロールして結果を確認できます。\n著者タクソノミーを作成する # 著者ごとに記事のリストを取得するには、authors タクソノミーを設定できます。これにより、さらに興味深い設定がいくつか可能になります。これは、記事に著者を表示するために必要なプロセスではオプションのステップです。\n最初のステップは、以下の例のように、config.toml ファイルで authors タクソノミーを設定することです。tag と category はデフォルトで Hugo で定義されていますが、一度特定のタクソノミーセクションを追加したら、再度追加する必要があります。そうしないと、サイトはそれらを処理しません。\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; これでほぼ完了です。著者を指定するページが作成され、それぞれに、参加している記事のリストが表示されます。設定ファイルで article.showAuthorsBadges を使用したり、各記事で showAuthorsBadges を使用したりして、各投稿アイテムに authors タクソノミーをバッジとして表示するかを選択できます。例として、このドキュメントでは著者を表示しないように設定されていますが、以下に参照されているサンプルを見ると、著者がバッジとして表示されていることがわかります。\n最後に、各著者ページに詳細を追加して、ちょっとした経歴、リンク、または用途に合った情報を表示できます。これを実現するには、./content/authors 内に各著者への key を持つフォルダを作成し、各フォルダ内に _index.md ファイルを配置します。上記の例では、.content/authors/nunocoracao/_index.md ファイルが作成されます。この中で、著者の実際の名前とそのページの内容を設定できます。このドキュメントウェブサイトの著者はこのように設定されているため、サイトをいじって見てください。\n--- title: \u0026#34;Nuno Coração\u0026#34; --- Nuno の素晴らしいダミー経歴。 サンプル # 以下のサンプルは、デフォルトのサイト作成者がオフになっており、記事に複数の作成者がいる例を示しています。\nMultiple Authors 1 分 Nuno Coração ,\u0026nbsp; Dummy Second Author Authors Sample ","externalUrl":null,"permalink":"/ja/docs/multi-author/","section":"ドキュメント","summary":"","title":"複数の著者","type":"docs"},{"content":" アナリティクス # Blowfish は、Fathom Analytics、Google アナリティクス、Umami Analytics のビルトインサポートを提供しています。Fathom は、ユーザーのプライバシーを尊重する Google アナリティクスの有料の代替手段です。\nFathom Analytics # Fathom Analytics のサポートを有効にするには、config/_default/params.toml ファイルに Fathom サイトコードを指定するだけです。Fathom のカスタムドメイン機能を使用していて、ドメインからスクリプトを配信したい場合は、追加で domain 設定値を指定することもできます。domain 値を指定しない場合、スクリプトは Fathom DNS から直接ロードされます。\n# config/_default/params.toml [fathomAnalytics] site = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; Google アナリティクス # Google アナリティクスのサポートは、Hugo の内部パーシャルを介して提供されます。config/_default/config.toml ファイルに googleAnalytics キーを指定するだけで、スクリプトが自動的に追加されます。\n指定された設定値に基づいて、バージョン 3 (analytics.js) とバージョン 4 (gtag.js) の両方がサポートされています。\n# config/_default/config.toml # バージョン 3 googleAnalytics = \u0026#34;UA-PROPERTY_ID\u0026#34; # バージョン 4 googleAnalytics = \u0026#34;G-MEASUREMENT_ID\u0026#34; Umami Analytics # Umami Analytics のサポートを有効にするには、config/_default/params.toml ファイルに Umami トラッキングコードを指定するだけです。 Umami のカスタムドメイン機能を使用していて、ドメインからスクリプトを配信したい場合は、追加で domain 設定値を指定することもできます。domain 値を指定しない場合、スクリプトは Umami DNS (analytics.umami.is) から直接ロードされます。 トラッカーを特定のドメインでのみ実行したい場合は、dataDomains 設定値を指定できます。dataDomains 値を指定しない場合、スクリプトは domain と websiteid が一致する任意のウェブサイトで実行されます。環境変数 TRACKER_SCRIPT_NAME が設定されている場合は、カスタムスクリプト名 scriptName を指定できます。設定されていない場合は、コメントアウトするか、デフォルトの script.js を使用してください。\n注: Umami Analytics を有効にすると、Blowfish は Umami トラックイベントを自動的にサポートします。トラックイベントをサポートしたくない場合は、パラメータ enableTrackEvent を false に設定する必要があります。 # config/_default/params.toml [umamiAnalytics] websiteid = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; dataDomains = \u0026#34;yoursite.com,yoursite2.com\u0026#34; scriptName = \u0026#34;TRACKER_SCRIPT_NAME\u0026#34; enableTrackEvent = true Seline Analytics # Seline Analytics のサポートを有効にするには、config/_default/params.toml ファイルに Seline トークンを指定するだけです。\n注: Seline Analytics を有効にすると、Blowfish は Seline トラックイベントを自動的にサポートします。トラックイベントをサポートしたくない場合は、パラメータ enableTrackEvent を false に設定する必要があります。 # config/_default/params.toml [selineAnalytics] token = \u0026#34;XXXXXX\u0026#34; enableTrackEvent = true カスタムアナリティクスプロバイダー # ウェブサイトで別のアナリティクスプロバイダーを使用したい場合は、アナリティクスパーシャルをオーバーライドして、独自のスクリプトを提供することもできます。プロジェクトに layouts/partials/extend-head.html ファイルを作成するだけで、ウェブサイトの \u0026lt;head\u0026gt; に自動的に含まれます。\nコメント # 記事にコメントを追加するために、Blowfish には、各記事ページの下部に含まれるコメントパーシャルのサポートが含まれています。選択したコメントを表示するために必要なコードを含む layouts/partials/comments.html を指定するだけです。\n組み込みの Hugo Disqus テンプレートを使用するか、独自のカスタムコードを提供できます。詳細については、Hugo ドキュメントを参照してください。\nパーシャルが提供されると、コメントが表示される場所をより細かく制御するために、showComments パラメータを使用して管理されます。この値は、params.toml 設定ファイルのテーマレベルで設定するか、フロントマターに含めることで記事ごとに設定できます。パラメータはデフォルトで false であるため、コメントを表示するには、これらの場所のいずれかで true に設定する必要があります。\nファビコン # Blowfish は、開始するための空白のファビコンのデフォルトセットを提供しますが、独自のアセットを提供してそれらを上書きできます。新しいファビコンアセットを取得する最も簡単な方法は、favicon.io などのサードパーティプロバイダーを使用してそれらを生成することです。\nアイコンアセットは、ウェブサイトの static/ フォルダに直接配置し、以下のリストに従って名前を付ける必要があります。favicon.io を使用する場合、これらは自動的に生成されるファイル名になりますが、必要に応じて独自のアセットを提供できます。\nstatic/ ├─ android-chrome-192x192.png ├─ android-chrome-512x512.png ├─ apple-touch-icon.png ├─ favicon-16x16.png ├─ favicon-32x32.png ├─ favicon.ico └─ site.webmanifest または、デフォルトのファビコンの動作を完全にオーバーライドして、独自のファビコン HTML タグとアセットを提供することもできます。プロジェクトに layouts/partials/favicons.html ファイルを提供するだけで、デフォルトのアセットの代わりにサイトの \u0026lt;head\u0026gt; に挿入されます。\nアイコン # アイコンショートコードと同様に、Blowfish の icon.html パーシャルを使用して、独自のテンプレートやパーシャルにアイコンを含めることができます。パーシャルは、含めるアイコンの名前である1つのパラメータを受け取ります。\n例:\n{{ partial \u0026#34;icon.html\u0026#34; \u0026#34;github\u0026#34; }} アイコンは Hugo パイプラインを使用して設定されるため、非常に柔軟です。Blowfish には、ソーシャル、リンク、その他の目的のための組み込みアイコンが多数含まれています。サポートされているアイコンの完全なリストについては、アイコンサンプルページを確認してください。\nカスタムアイコンは、プロジェクトの assets/icons/ ディレクトリに独自のアイコンアセットを提供することで追加できます。その後、.svg 拡張子なしで SVG ファイル名を使用して、パーシャルでアイコンを参照できます。\nアイコンは、アイコンショートコードを呼び出すことで、記事のコンテンツでも使用できます。\n拡張機能 # Blowfish は、基本機能を拡張できる多数の拡張パーシャルも提供しています。\n記事リンク # 記事リンクの後にコードを追加したい場合は、layouts/partials/extend-article-link.html ファイルを作成します。これは、特定の記事のメタデータを強調表示するために使用できる badge ショートコードと組み合わせると特に効果的です。\nヘッダーとフッター # このテーマでは、テンプレートの \u0026lt;head\u0026gt; セクションと \u0026lt;footer\u0026gt; セクションに直接コードを追加できます。これらは、テーマの一部ではないスクリプトやその他のロジックを提供するのに役立ちます。\nlayouts/partials/extend-head.html または layouts/partials/extend-footer.html を作成するだけで、これらは自動的にウェブサイトのビルドに含まれます。どちらのパーシャルも \u0026lt;head\u0026gt; と \u0026lt;footer\u0026gt; の最後の項目として挿入されるため、テーマのデフォルトを上書きするために使用できます。\n非キャッシュの head 拡張 # extend-head.html はキャッシュされるが、Blowfish ではページ単位の条件に応じてスクリプトやメタデータを動的に含めるための、非キャッシュの head 拡張にも対応している。この機能を使うには、プロジェクト内に layouts/partials/extend-head-uncached.html ファイルを作成する。このファイルは HTML の \u0026lt;head\u0026gt; タグ内に読み込まれる。\nこれは、ショートコードや front matter のフラグなど、ビルド間でキャッシュされるべきでないページ固有の要素に基づいて、スクリプトやメタデータを動的に含めたい場合に有用。\nたとえば、ショートコードの有無に応じて CDN の JavaScript ファイルを読み込むには、extend-head-uncached.html 内で HasShortcode メソッドを使う。\n","externalUrl":null,"permalink":"/ja/docs/partials/","section":"ドキュメント","summary":"","title":"パーシャル","type":"docs"},{"content":" サムネイル # Blowfish は、記事に視覚的な要素を簡単に追加できるように改良されました。サムネイル画像を設定するには、以下の例のように、記事のメインディレクトリ内に feature* で始まる画像ファイル (ほとんどすべての形式がサポートされていますが、.png または .jpg を推奨) を配置するだけです。\ncontent └── awesome_article ├── index.md └── featured.png このように配置することで、Blowfish は記事にサムネイル画像があることを認識し、ウェブサイト全体でサムネイルとして使用したり、ソーシャルプラットフォームで共有する際の oEmbed カード用画像として使用したりできます。\nフォルダ構成 # 記事を単一の .md ファイルで管理していて、次のようなファイル構成になっている場合:\ncontent └── awesome_article.md 単一の Markdown ファイルからフォルダ形式に変更する必要があります。記事と同じ名前のディレクトリを作成し、その中に index.md ファイルを作成します。以下のような構成になります。\ncontent └── awesome_article └── index.md あとは、前述のように画像を追加するだけです。設定例を確認したい場合は、こちらのサンプルをご覧ください。\nヒーロー画像 # サムネイル画像は、デフォルトで各記事のヒーロー画像としても使用されます。サイト全体、または特定の記事ごとにこの機能を設定するには、config/_default/params.toml 内の article.showHero、または各記事のフロントマターパラメータ showHero を使用します。ヒーロー画像のスタイルを変更したい場合は、./layouts/partials/ に hero.html というファイルを作成することで、テーマの元のパーシャルを上書きできます。\n","externalUrl":null,"permalink":"/ja/docs/thumbnails/","section":"ドキュメント","summary":"","title":"サムネイル","type":"docs"},{"content":"ドキュメントを順に読んできた方なら、Blowfish で利用可能なすべての機能と設定について、すでにご存じでしょう。このページでは、これまで説明してきたすべてをまとめて、Hugo プロジェクトで使用できる実践的なサンプルを紹介します。\nヒント: Hugo を初めて使用する場合は、公式ドキュメントでページバンドルとリソースの概念について、さらに詳しく学習することをお勧めします。 このページの例は、さまざまなシナリオに適応できます。あなたのプロジェクトで、特定のコンテンツをどのようにフォーマットするか、そのヒントになれば幸いです。\nブランチページ # Hugo のブランチページバンドルは、ホームページ、セクションリスト、タクソノミーページなどを指します。ブランチバンドルで覚えておくべき重要なことは、このコンテンツタイプのファイル名が _index.md であることです。\nBlowfish は、ブランチページで指定された Front Matter のパラメータを認識し、特定のページのデフォルト設定を上書きします。例えば、ブランチページで title パラメータを設定すると、そのページのタイトルを上書きできます。\nホームページ # レイアウト: layouts/index.html コンテンツ: content/_index.md Blowfish のホームページは、その全体デザインがホームページレイアウト設定パラメータによって制御される、特別なページです。詳細はホームページレイアウトセクションをご覧ください。\nホームページに独自のコンテンツを追加するには、content/_index.md ファイルを作成するだけです。このファイルの内容が、ホームページに表示されます。\n例:\n--- title: \u0026#34;Blowfish へようこそ!\u0026#34; description: \u0026#34;ホームページにコンテンツを追加するデモです。\u0026#34; --- 私のウェブサイトへようこそ! お越しいただき、本当に嬉しいです。 この例では、独自のタイトルを設定し、ページ本文にテキストを追加しています。ショートコード、画像、リンクなど、Markdown 形式のテキストはすべて使用できます。\nリストページ # レイアウト: layouts/_default/list.html コンテンツ: content/../_index.md リストページは、セクション内の全ページをまとめて、訪問者が各ページを閲覧できるようにします。ブログやポートフォリオは、投稿やプロジェクトをまとめるリストページの代表例です。\nリストページは、コンテンツフォルダ内にサブディレクトリを作成するだけで簡単に作成できます。例えば、「プロジェクト」セクションを作成するには、content/projects/ を作成します。そして、各プロジェクト用の Markdown ファイルを作成します。\nリストページはデフォルトで生成されますが、コンテンツをカスタマイズするには、この新しいディレクトリ内に _index.md ファイルも作成する必要があります。\n. └── content └── projects ├── _index.md # /projects ├── first-project.md # /projects/first-project └── another-project ├── index.md # /projects/another-project └── project.jpg Hugo は、projects フォルダ内の各ページに対して、適切な URL を自動生成します。\nホームページと同様に、_index.md ファイルの内容は、生成されたリストのインデックスページに表示されます。そして、Blowfish は、そのセクション内のページをコンテンツの下に一覧表示します。\n例:\n--- title: \u0026#34;プロジェクト\u0026#34; description: \u0026#34;私のプロジェクトのいくつかをご紹介します。\u0026#34; cascade: showReadingTime: false --- このセクションでは、私の現在進行中のプロジェクトを紹介しています。 この例では、特別な cascade パラメータを使用して、このセクション内の各ページの閲覧時間を非表示にしています。これにより、各プロジェクトページでは閲覧時間が表示されなくなります。これは、個々のページにパラメータを記述することなく、セクション全体のデフォルトのテーマパラメータを上書きできる便利な方法です。\nこのサイトのサンプルセクションは、リストページの活用例です。\nタクソノミーページ # リストレイアウト: layouts/_default/taxonomy.html タームレイアウト: layouts/_default/term.html コンテンツ: content/../_index.md タクソノミーページには、「タクソノミーリスト」と「タクソノミーターム」の2種類があります。リストは特定のタクソノミー内の各タームの一覧を表示し、タームは特定のタームに関連付けられたページ一覧を表示します。\n少し複雑に感じるかもしれないので、animals というタクソノミーを例に説明します。\nまず、Hugo でタクソノミーを使用するには、設定が必要です。config/_default/taxonomies.toml に設定ファイルを作成し、タクソノミー名を定義しましょう。\n# config/_default/taxonomies.toml animal = \u0026#34;animals\u0026#34; Hugo ではタクソノミーを単数形と複数形で設定する必要があるため、ここでは animal (単数形) = animals (複数形) として、サンプルのタクソノミーを作成します。\nanimals タクソノミーが作成できたので、次はこれを個々のコンテンツに追加します。フロントマターに以下のように記述するだけです。\n--- title: \u0026#34;ライオンの巣窟へ\u0026#34; description: \u0026#34;今週はライオンについて学びます。\u0026#34; animals: [\u0026#34;lion\u0026#34;, \u0026#34;cat\u0026#34;] --- これで、animals タクソノミー内に lion と cat という2つの ターム が作成されました。\nこの時点ではまだ分かりませんが、Hugo はこの新しいタクソノミーのために、リストページとタームページを自動生成します。デフォルトでは、リストページは /animals/、タームページは /animals/lion/ と /animals/cat/ でアクセスできます。\nリストページには、タクソノミーに含まれるすべてのタームが一覧表示されます。この例では、/animals/ にアクセスすると、「lion」と「cat」へのリンクが表示され、それぞれのタームページへ移動できます。\nタームページには、そのタームに関連付けられたすべてのページが表示されます。タームリストは、基本的に通常のリストページと同じで、ほぼ同様に機能します。\nタクソノミーページに独自のコンテンツを追加するには、タクソノミー名をサブディレクトリ名として、content フォルダ内に _index.md ファイルを作成するだけです。\n. └── content └── animals ├── _index.md # /animals └── lion └── _index.md # /animals/lion これらのファイルに記述した内容はすべて、自動生成されたタクソノミーページに表示されます。他のコンテンツと同様に、フロントマターの変数を使用してデフォルト値を上書きできます。例えば、lion というタグ名を付けつつ、title を「Lion」と表示することも可能です。\n実際の表示例は、このサイトのタグタクソノミーリストをご覧ください。\nリーフページ # レイアウト: layouts/_default/single.html コンテンツ (スタンドアロン): content/../page-name.md コンテンツ (バンドル): content/../page-name/index.md Hugo のリーフページは、基本的に標準的なコンテンツページです。サブページを含まないページとして定義されます。例えば、自己紹介ページや、ウェブサイトのブログセクションにある個別のブログ記事などが該当します。\nリーフページで最も重要なのは、ブランチページとは異なり、ファイル名をアンダースコアを 付けずに index.md とすることです。また、リーフページはセクションのトップレベルでグループ化し、それぞれに固有の名前を付けられるという点でも特別です。\n. └── content └── blog ├── first-post.md # /blog/first-post ├── second-post.md # /blog/second-post └── third-post ├── index.md # /blog/third-post └── image.jpg 画像などのアセットをページに含める場合は、ページバンドルを使用する必要があります。ページバンドルは、index.md ファイルを含むサブディレクトリを使用して作成します。多くのショートコードやその他のテーマロジックは、リソースがページと共にバンドルされていることを前提としているため、アセットとコンテンツを独自のディレクトリにまとめておくことが重要です。\n例:\n--- title: \u0026#34;初めてのブログ記事\u0026#34; date: 2022-01-25 description: \u0026#34;私のブログへようこそ!\u0026#34; summary: \u0026#34;私自身と、このブログを始めた理由についてご紹介します。\u0026#34; tags: [\u0026#34;welcome\u0026#34;, \u0026#34;new\u0026#34;, \u0026#34;about\u0026#34;, \u0026#34;first\u0026#34;] --- _これ_ が私のブログ記事の本文です。 リーフページでは、表示方法をカスタマイズするために、様々なフロントマターパラメータを使用できます。\n外部リンク # Blowfish には、記事リストの記事と一緒に外部リンクを表示できる特別な機能があります。これは、Medium などのサードパーティのウェブサイトにコンテンツがある場合や、Hugo サイトにコンテンツを複製せずにリンクしたい研究論文がある場合に便利です。\n外部リンク記事を作成するには、特別なフロントマターを設定する必要があります。\n--- title: \u0026#34;私の Medium 記事\u0026#34; date: 2022-01-25 externalUrl: \u0026#34;https://medium.com/\u0026#34; summary: \u0026#34;Medium に記事を投稿しました。\u0026#34; showReadingTime: false build: render: \u0026#34;false\u0026#34; list: \u0026#34;local\u0026#34; --- title や summary などの通常の Front Matter パラメータに加えて、externalUrl パラメータは、これが通常の記事ではないことを Blowfish に伝えるために使用されます。ここに指定された URL は、訪問者がこの記事を選択した際にリダイレクトされる場所です。\nさらに、特別な Hugo フロントマターパラメータ build を使用して、このコンテンツの通常のページが生成されないようにします。外部リンクにリダイレクトするため、ページを生成する必要はありません。\nテーマには、外部リンク記事を簡単に作成するためのアーキタイプが含まれています。新しいコンテンツを作成する際に、-k external を指定するだけです。\nhugo new -k external posts/my-post.md シンプルページ # レイアウト: layouts/_default/simple.html フロントマター: layout: \u0026quot;simple\u0026quot; Blowfish には、シンプルなページ用の特別なレイアウトも用意されています。シンプルレイアウトは、特別なテーマ機能を使用せずに、Markdown コンテンツのみを表示する全幅テンプレートです。\nシンプルレイアウトで利用できる機能は、パンくずリストと共有リンクのみです。ただし、これらの動作は、通常のページのフロントマター変数を使用して制御できます。\n特定のページでシンプルレイアウトを有効にするには、layout フロントマター変数に値 \u0026quot;simple\u0026quot; を設定します。\n--- title: \u0026#34;私のランディングページ\u0026#34; date: 2022-03-08 layout: \u0026#34;simple\u0026#34; --- このページのコンテンツは全幅で表示されます。 カスタムレイアウト # Hugo の利点の 1 つは、サイト全体、個別のセクション、またはページごとに、簡単にカスタムレイアウトを作成できることです。\nレイアウトは、通常の Hugo テンプレートルールに従います。詳細は公式 Hugo ドキュメントをご覧ください。\nデフォルトレイアウトの上書き # 上記の各コンテンツタイプには、それぞれのタイプのページを生成するために使用されるレイアウトファイルが記載されています。このファイルをローカルプロジェクトで作成すると、テーマのテンプレートが上書きされるため、ウェブサイトのデフォルトスタイルをカスタマイズできます。\n例えば、layouts/_default/single.html ファイルを作成すると、リーフページのレイアウトを完全にカスタマイズできます。\nカスタムセクションレイアウト # 個々のコンテンツセクション用に、カスタムレイアウトを作成することも簡単です。特定のスタイルを使用して、特定のタイプのコンテンツを一覧表示するセクションを作成したい場合に便利です。\n特別なレイアウトを使用してプロジェクトを一覧表示する、カスタム「プロジェクト」ページを作成する例を見てみましょう。\nまず、通常の Hugo コンテンツルールに従ってコンテンツを構成し、プロジェクト用のセクションを作成します。次に、コンテンツと同じディレクトリ名を使用し、list.html ファイルを追加して、プロジェクトセクション用の新しいレイアウトを作成します。\n. └── content │ └── projects │ ├── _index.md │ ├── first-project.md │ └── second-project.md └── layouts └── projects └── list.html この list.html ファイルは、デフォルトのリストテンプレートを上書きしますが、projects セクションに対してのみ有効です。このファイルの中身を見る前に、まず個々のプロジェクトファイルを見てみましょう。\n--- title: \u0026#34;Blowfish\u0026#34; date: 2021-08-11 icon: \u0026#34;github\u0026#34; description: \u0026#34;Tailwind CSS を使用して構築された Hugo テーマ。\u0026#34; topics: [\u0026#34;Hugo\u0026#34;, \u0026#34;Web\u0026#34;, \u0026#34;Tailwind\u0026#34;] externalUrl: \u0026#34;https://github.com/nunocoracao/blowfish/\u0026#34; --- ここでは、各プロジェクトのメタデータを設定しています。このメタデータは、後ほどリストテンプレートで使用できます。ページコンテンツはありませんが、必要に応じて追加することも可能です。あなた独自のカスタムテンプレートですから!\nプロジェクトが定義できたので、次は各プロジェクトの詳細を出力するリストテンプレートを作成しましょう。\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;mt-8\u0026#34;\u0026gt; {{ range .Pages }} \u0026lt;article class=\u0026#34;pb-6\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;flex\u0026#34; href=\u0026#34;{{ .Params.externalUrl }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mr-3 text-3xl text-neutral-300\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;relative inline-block align-text-bottom\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Params.icon }} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3 class=\u0026#34;flex text-xl font-semibold\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-neutral-400\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/section\u0026gt; {{ end }} これは非常にシンプルな例ですが、このセクションの各ページ (つまり、各プロジェクト) を順に処理し、アイコンと共に各プロジェクトへの HTML リンクを出力しています。各プロジェクトのフロントマターのメタデータは、表示される情報を決定するために使用されます。\n関連するスタイルとクラスが利用可能であることを確認する必要があることに注意してください。場合によっては、Tailwind CSS の再コンパイルが必要になる場合があります。これについては、高度なカスタマイズセクションで詳しく説明しています。\nこのようなカスタムテンプレートを作成する際には、まずデフォルトの Blowfish テンプレートの動作を確認し、それを参考にすることをお勧めします。Hugo ドキュメントも、テンプレート作成について学ぶための優れた情報源です。\n","externalUrl":null,"permalink":"/ja/docs/content-examples/","section":"ドキュメント","summary":"","title":"コンテンツの例","type":"docs"},{"content":"Blowfish は、一連の記事を「シリーズ」でグループ化する機能を提供します。記事をシリーズの下に配置すると、残りのシリーズ記事が各ページに表示され、それらの間をすばやく移動できるようになります。この例は、上で確認できます。\nタクソノミーの作成 # シリーズを有効にするにはまず、series タクソノミーを作成してください。具体的には、config.toml のタクソノミーリストに series タクソノミーを追加するだけです。\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; series = \u0026#34;series\u0026#34; 記事をマークする # 次に、series パラメータと series_order を使用して各記事をマークする必要があります。series パラメータは、記事を配置するシリーズの ID と名前になります (変数は配列ですが、各記事を単一のシリーズに保つことをお勧めします)。そして、series_order は、シリーズ内のその記事の順序を定義します。以下の例では、記事は Documentation シリーズの 11 番です。\nseries: [\u0026#34;Documentation\u0026#34;] series_order: 11 シリーズの動作 # 記事をシリーズの一部としてマークすると、このページでご覧いただけるように、シリーズモジュールが自動的に表示されます。そのモジュールを開始時に開くかどうかは、params.toml の article.seriesOpened グローバル変数、または記事レベルでオーバーライドを指定するフロントマターパラメータ seriesOpened を使用して選択できます。\n","externalUrl":null,"permalink":"/ja/docs/series/","section":"ドキュメント","summary":"","title":"シリーズ","type":"docs"},{"content":"Blowfish には高度な変更を加えるための多くの方法があります。カスタマイズできる内容や、希望する結果を得るための最良の方法については、以下をご覧ください。\nさらにアドバイスが必要な場合は、 GitHub Discussions に質問を投稿してください。\nHugo プロジェクトの構造 # 始める前に、Hugo プロジェクトの構造と、コンテンツとテーマのカスタマイズを管理するためのベストプラクティスについて簡単に説明します。\n簡単に言うと: テーマファイルを直接編集してはいけません。カスタマイズは、テーマディレクトリ自体ではなく、Hugoプロジェクトのサブディレクトリ内でのみ行います。 Blowfish は、Hugo の標準的な実装をすべて活用できるように構築されています。コアのテーマファイルを変更することなく、テーマのあらゆる側面をカスタマイズしたりオーバーライドしたりできるように設計されています。これにより、ウェブサイトの見た目を完全にコントロールしながら、シームレスな改善が可能になります。\nそのために、テーマファイルを手動で直接編集するのは避けてください。Hugo モジュール、git サブモジュール、または手動でテーマを themes/ ディレクトリに格納するなど、どのインストール方法を使用する場合でも、これらのファイルは常にそのままにしておく必要があります。\nテーマの動作を調整する正しい方法は、Hugo の強力なファイル優先順位を使用してファイルをオーバーライドすることです。要約すると、優先順位により、プロジェクトディレクトリに含めたファイルは、すべてのテーマファイルよりも自動的に優先されます。\nたとえば、Blowfish のメイン記事テンプレートをオーバーライドしたい場合は、独自の layouts/_default/single.html ファイルを作成してプロジェクトのルートに配置するだけです。このファイルは、テーマ自体を変更することなく、テーマの single.html をオーバーライドします。これは、HTML テンプレート、パーシャル、ショートコード、設定ファイル、データ、アセットなど、すべてのテーマファイルで機能します。\nこの簡単なプラクティスに従う限り、カスタム変更が失われることを心配することなく、いつでもテーマを更新したり（または異なるテーマバージョンをテストしたり）することができます。\n画像最適化設定の変更 # Hugo には、画像のサイズ変更、トリミング、最適化を行うためのさまざまな組み込みメソッドがあります。\n例として - layouts/partials/article-link/card.html には、次のコードがあります。\n{{ with .Resize \u0026#34;600x\u0026#34; }} \u0026lt;div class=\u0026#34;w-full thumbnail_card nozoom\u0026#34; style=\u0026#34;background-image:url({{ .RelPermalink }});\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ end }} ここでの Hugo のデフォルトの動作は、比率を維持しながら画像のサイズを 600px に変更することです。\nここで、アンカーポイントのようなデフォルトの画像設定は、テンプレート自体だけでなく、サイト設定でも設定できることに注意してください。\n詳細については、画像処理に関する Hugo ドキュメントを参照してください。\nカラースキーム # Blowfish には、すぐに使用できる多数のカラースキームが付属しています。基本的なカラースキームを変更するには、colorScheme テーマパラメータを設定します。 組み込みのスキームの詳細については、はじめにセクションを参照してください。\nデフォルトのスキームに加えて、独自のスキームを作成し、ウェブサイト全体を好みに合わせて再スタイルすることもできます。 スキームは、assets/css/schemes/ フォルダに \u0026lt;scheme-name\u0026gt;.css ファイルを配置することで作成されます。ファイルが作成されたら、テーマ設定で名前で参照するだけです。\n注: これらのファイルを手動で生成するのは難しい場合があるため、それを支援する nodejs ターミナルツール Fugu を作成しました。これは、カラーパレットの主要な3つの hex 値を渡すと、プログラムは Blowfish に直接インポートできる css ファイルを出力します。 Blowfish は、テーマ全体で使用される3色のパレットを定義します。3色は neutral、primary、secondary のバリエーションとして定義され、それぞれに10の色合いが含まれています。\nTailwind CSS 3.0 が不透明度で色の値を計算する方式のため、スキームで指定された色は、赤、緑、青の色の値を提供することにより、特定の形式に準拠する必要があります。\n:root { --color-primary-500: 139, 92, 246; } この例では、赤の値が 139、緑の値が 92、青の値が 246 の primary-500 カラーの CSS 変数を定義しています。\n既存のテーマスタイルシートの1つをテンプレートとして使用します。独自の色を自由に定義できますが、インスピレーションが必要な場合は、公式の Tailwind カラーパレットリファレンスを確認してください。\nスタイルシートのオーバーライド # 独自の HTML 要素をスタイルするために、カスタムスタイルを追加する必要がある場合があります。Blowfish は、独自の CSS スタイルシートでデフォルトのスタイルをオーバーライドできるようにすることで、このシナリオに対応します。プロジェクトの assets/css/ フォルダに custom.css ファイルを作成するだけです。\ncustom.css ファイルは Hugo によって縮小され、他のすべてのテーマスタイルの後に自動的にロードされます。つまり、カスタムファイルの内容はデフォルトよりも優先されます。\n追加フォントの使用 # Blowfishでは、サイトのフォントを簡単に変更することができます。プロジェクトのassets/css/フォルダ内にcustom.cssファイルを作成した後、staticルートフォルダ内のfontsフォルダ内にフォントファイルを配置するだけです。\n. ├── assets │ └── css │ └── custom.css ... └─── static └── fonts └─── font.ttf これにより、フォントをウェブサイトで使用できるようになります。すると、フォントを custom.css にインポートし、適切と思われる場所で置き換えることができます。以下の例は、html 全体のフォントを置き換える方法を示しています。\n@font-face { font-family: font; src: url(\u0026#39;/fonts/font.ttf\u0026#39;); } html { font-family: font; } フォントサイズの調整 # ウェブサイトのフォントサイズを変更することは、デフォルトのスタイルシートをオーバーライドする1つの例です。Blowfish は、テーマ全体で基本 HTML フォントサイズから派生したスケーリングされたフォントサイズを使用するため、これを簡単にします。デフォルトでは、Tailwind はデフォルトサイズを 12pt に設定していますが、任意の値に変更できます。\n上記の手順 を使用して custom.css ファイルを作成し、次の CSS 宣言を追加します。\n/* デフォルトのフォントサイズを大きくする */ html { font-size: 13pt; } この1つの値を変更するだけで、ウェブサイトのすべてのフォントサイズがこの新しいサイズに合わせて調整されます。なので、使用されるフォントサイズ全体を大きくするには、値を 12pt より大きくすれば良いです。同様に、フォントサイズを小さくするには、値を 12pt より小さくすれば良いです。\nソースからテーマ CSS をビルドする # 大幅な変更を加えたい場合は、Tailwind CSS の JIT コンパイラを利用して、テーマ CSS 全体を最初から再構築できます。これは、Tailwind 設定を調整したり、メインスタイルシートに追加の Tailwind クラスを追加したりする場合に便利です。\n注: テーマの手動ビルドは上級者向けです。 Tailwind CSS のビルド方法を順番に説明します。\nTailwind 設定 # 実際に使用されている Tailwind クラスのみを含む CSS ファイルを生成するために、JIT コンパイラはすべての HTML テンプレートと Markdown コンテンツファイルをスキャンして、マークアップにどのスタイルが存在するかを確認する必要があります。コンパイラは、テーマディレクトリのルートに含まれる tailwind.config.js ファイルを調べてこれを行います。\n// themes/blowfish/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/blowfish/layouts/**/*.html\u0026#34;, \u0026#34;./themes/blowfish/content/**/*.{html,md}\u0026#34;, ], // その他... }; このデフォルト設定には、これらのコンテンツパスが含まれているため、特定のプロジェクト構造に従う限り、変更することなく独自の CSS ファイルを簡単に生成できます。つまり、Blowfish を themes/blowfish/ のサブディレクトリとしてプロジェクトに含める必要があります。これは、Hugo Modules を使用してテーマを簡単にインストールできないことを意味し、git サブモジュール（推奨）または手動インストールルートのいずれかを選択する必要があります。インストールドキュメント では、これらのいずれかの方法を使用してテーマをインストールする方法について説明しています。\nプロジェクト構造 # デフォルト設定を利用するために、プロジェクトは次のようになります\u0026hellip;\n. ├── assets │ └── css │ └── compiled │ └── main.css # これが生成するファイル ├── config # サイト設定 │ └── _default ├── content # サイトコンテンツ │ ├── _index.md │ ├── projects │ │ └── _index.md │ └── blog │ └── _index.md ├── layouts # サイトのカスタムレイアウト │ ├── partials │ │ └── extend-article-link/simple.html │ ├── projects │ │ └── list.html │ └── shortcodes │ └── disclaimer.html └── themes └── blowfish # git サブモジュールまたは手動テーマインストール この例の構造では、独自のカスタムレイアウトを持つ新しい projects コンテンツタイプと、カスタムショートコードと拡張パーシャルが追加されています。プロジェクトがこの構造に従っている場合、必要なのは main.css ファイルを再コンパイルすることだけです。\n依存関係のインストール # これが機能するには、themes/blowfish/ ディレクトリに移動し、プロジェクトの依存関係をインストールする必要があります。この手順では、ローカルマシンに npm が必要になります。\ncd themes/blowfish npm install Tailwind コンパイラを実行する # 依存関係がインストールされたら、あとは Tailwind CLI を使用して JIT コンパイラを呼び出すだけです。Hugo プロジェクトのルートに戻り、次のコマンドを実行します。\ncd ../.. ./themes/blowfish/node_modules/@tailwindcss/cli/dist/index.mjs -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit 関係するパスのため少し見苦しいコマンドですが、基本的に Tailwind CLI を呼び出し、Tailwind 設定ファイルの場所（上で見たもの）、テーマの main.css ファイルの場所、そしてコンパイル済み CSS ファイルを配置する場所（Hugo プロジェクトの assets/css/compiled/ フォルダ）を渡しています。\n設定ファイルは、プロジェクト内のすべてのコンテンツとレイアウト、およびテーマ内のすべてのコンテンツとレイアウトを自動的にスキャンし、ウェブサイトに必要なすべての CSS を含む新しい CSS ファイルを作ります。Hugo のファイル階層を処理する方法のため、プロジェクト内のこのファイルは、テーマに付属のファイルを自動的にオーバーライドするようになります。\nレイアウトに変更を加え、新しい Tailwind CSS スタイルが必要になるたびに、コマンドを再実行して新しい CSS ファイルを生成するだけです。 コマンドの最後に -w を追加して、JIT コンパイラをウォッチモードで実行することもできます。\nビルドスクリプトを作成する # このソリューションを完全に完了するには、これらのコマンドのエイリアスを追加するか、私が行っているように、必要なスクリプトを含む package.json をプロジェクトのルートに追加することで、このプロセス全体を簡素化できます\u0026hellip;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/blowfish/node_modules/@tailwindcss/cli/dist/index.mjs -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/blowfish/node_modules/@tailwindcss/cli/dist/index.mjs -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // その他... } これで、サイトの設計に取り組むときは、 npm run dev を呼び出すと、コンパイラがウォッチモードで実行されます。デプロイの準備ができたら、npm run build を実行すると、クリーンな Tailwind CSS ビルドが得られます。\n🙋‍♀️ ご不明な点がありましたら、GitHub Discussions で気軽に質問してください。\n","externalUrl":null,"permalink":"/ja/docs/advanced-customisation/","section":"ドキュメント","summary":"","title":"高度なカスタマイズ","type":"docs"},{"content":"Blowfish で構築された Hugo ウェブサイトをデプロイする方法はたくさんあります。このテーマは、ほとんどすべてのデプロイシナリオで柔軟に対応できるように設計されています。\nBlowfish は、テーマ全体で相対的な URL を使用して構築されています。これにより、サイトをサブフォルダや GitHub Pages などのホストに簡単にデプロイできます。baseURL パラメータが config.toml ファイルで設定されていれば、通常、これが機能するために特別な設定は必要ありません。\nHugo の公式ホスティングとデプロイドキュメントは、サイトのデプロイ方法を学ぶのに最適な場所です。以下のセクションには、特定のプロバイダーでスムーズにデプロイするのに役立つ、テーマ固有の設定の詳細が記載されています。\nプロバイダーを選択してください:\nGitHub Pages Netlify Render Cloudflare Pages 共有ホスティング、VPS、またはプライベート Web サーバー GitHub Pages # GitHub では、GitHub Pages でのアクションを使用したホスティングが可能です。この機能を有効にするには、リポジトリで Pages を有効にし、サイトをビルドしてデプロイするための新しいアクションワークフローを作成します。\nファイルは YAML 形式で、GitHub リポジトリの .github/workflows/ ディレクトリ内に配置し、.yml 拡張子を付けて名前を付ける必要があります。\n重要: branches の下とデプロイステップの if パラメータに、プロジェクトで使用されているソースブランチの正しいブランチ名を設定してください。 # .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-24.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public 設定ファイルを GitHub にプッシュすると、アクションが自動的に実行されます。最初は失敗する可能性があり、GitHub リポジトリの Settings \u0026gt; Pages セクションにアクセスして、ソースが正しいことを確認する必要があります。gh-pages ブランチを使用するように設定する必要があります。\n設定が完了したら、アクションを再実行すると、サイトが正しくビルドおよびデプロイされます。すべてが正常にデプロイされたことを確認するには、アクションログを参照してください。\nNetlify # Netlify にデプロイするには、新しい継続的デプロイサイトを作成し、それをソースコードにリンクします。Netlify UI では、ビルド設定を空白のままにすることができます。使用するドメインを設定するだけで済みます。\n次に、サイトリポジトリのルートに netlify.toml ファイルを作成します。\n# netlify.toml [build] command = \u0026#34;hugo mod get -u \u0026amp;\u0026amp; hugo --gc --minify -b $URL\u0026#34; publish = \u0026#34;public\u0026#34; [build.environment] NODE_ENV = \u0026#34;production\u0026#34; GO_VERSION = \u0026#34;1.16\u0026#34; TZ = \u0026#34;UTC\u0026#34; # 希望のタイムゾーンに設定 [context.production.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; この設定では、Blowfish を Hugo モジュールとしてデプロイすることを想定しています。別の方法でテーマをインストールした場合は、ビルドコマンドを単に hugo --gc --minify -b $URL に変更します。\n設定ファイルをリポジトリにプッシュすると、Netlify は自動的にサイトをデプロイします。エラーがないか確認するには、Netlify UI のデプロイログを確認してください。\nRender # Render へのデプロイは非常に簡単で、すべての設定は Render UI を介して行います。\n新しい 静的サイト を作成し、それをプロジェクトのコードリポジトリにリンクします。次に、ビルドコマンドを hugo --gc --minify に、公開ディレクトリを public に設定するだけです。\nリポジトリに変更をプッシュするたびに、サイトが自動的にビルドおよびデプロイされます。\nCloudflare Pages # Cloudflare は、Hugo ブログをホストできる Pages サービスを提供しています。これは、git リポジトリからサイトをビルドし、Cloudflare の CDN でホストします。Hugo デプロイメントガイドに従って始めてください。\nCloudflare が提供する Rocket Loader™ 機能は、JavaScript を使用した Web ページのレンダリングを高速化しようとしますが、テーマの外観スイッチャーが壊れます。また、スクリプトが間違った順序で読み込まれるため、サイトの閲覧時に迷惑な明暗の画面のちらつきが発生する可能性があります。\nこの問題は、次のように無効にすることで修正できます。\nCloudflare ダッシュボードに移動します リストでドメイン名をクリックします Speed セクションで Optimization をクリックします Rocket Loader™ までスクロールして無効にします Blowfish でビルドされた Hugo サイトは、この機能を無効にしても非常に高速に読み込まれます。\n共有ホスティング、VPS、またはプライベート Web サーバー # 従来の Web ホスティングを使用したり、独自の Web サーバーにデプロイしたりするのは、Hugo サイトをビルドしてファイルをホストに転送するのと同じくらい簡単です。\nconfig.toml の baseURL パラメータが、ウェブサイトのルートへの完全な URL (サブドメインやサブフォルダを含む) に設定されていることを確認してください。\n次に、hugo を使用してサイトをビルドし、出力ディレクトリの内容を Web サーバーのルートにコピーすると、準備完了です。デフォルトでは、出力ディレクトリの名前は public です。\nホスティングプロバイダーが必要な場合は、Vultr または DigitalOcean を確認してください。これらのアフィリエイトリンクを使用してサインアップすると、最大 $100 の無料クレジットが付与されるため、サービスを試すことができます。\n","externalUrl":null,"permalink":"/ja/docs/hosting-deployment/","section":"ドキュメント","summary":"","title":"ホスティングとデプロイ","type":"docs"},{"content":"ウェブサイト全体で動的データをサポートできるようにするために、Firebase を統合するサポートを追加しました。これにより、リストや投稿全体で閲覧数機能を使用できるようになります。\nFirebase のウェブサイトにアクセスして、無料のアカウントを作成します 新規プロジェクトを作成します 分析ロケーションを選択します プロジェクトの変数を取得し、params.toml ファイル内で設定して、Blowfish で Firebase を設定します。詳細は、このページをご覧ください。Firebase が提供するファイルの例を以下に示します。FirebaseConfig オブジェクト内のパラメータに注意してください。 // 必要な SDK から必要な関数をインポートします import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: 使用する Firebase 製品の SDK を追加します // https://firebase.google.com/docs/web/setup#available-libraries // ウェブアプリの Firebase 設定 // Firebase JS SDK v7.20.0 以降では、measurementId はオプションです const firebaseConfig = { apiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;, authDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;, projectId: \u0026#34;blowfish-21fff\u0026#34;, storageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;, messagingSenderId: \u0026#34;60108104191\u0026#34;, appId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;, measurementId: \u0026#34;G-PEDMYR1V0K\u0026#34; }; // Firebase を初期化する const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); Firestore を設定する - 「ビルド」を選択して Firestore を開きます。新しいデータベースを作成し、本番モードで開始することを選択します。サーバーの場所を選択して待ちます。開始したら、ルールを設定する必要があります。以下のファイルをコピーして貼り付け、「公開」をクリックします。 rules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } 匿名認証を有効にする - 「ビルド」を選択して「認証」を開きます。「開始する」を選択し、「匿名」をクリックしてオンにし、保存します。 お楽しみください - すべて (または特定の) 記事に対して、Blowfish で閲覧数といいねを有効にできるようになりました。 ","externalUrl":null,"permalink":"/ja/docs/firebase-views/","section":"ドキュメント","summary":"","title":"Firebase: 閲覧数といいね","type":"docs"},{"content":"2人目のダミー作者の素晴らしいダミープロフィールです。\n","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/authors/secondauthor/","section":"著者のタクソノミーリストの例","summary":"","title":"2人目のダミー作者","type":"authors"},{"content":"","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/tags/authors/","section":"タグ","summary":"","title":"Authors","type":"tags"},{"content":" こちらは background レイアウトのデモです。 レイアウトを変更する\u0026orarr; npx blowfish-tools ","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/","section":"Blowfish へようこそ! 🎉","summary":"","title":"Blowfish へようこそ! 🎉","type":"page"},{"content":"Nuno の素晴らしいダミープロフィールです。\n","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/authors/nunocoracao/","section":"著者のタクソノミーリストの例","summary":"","title":"Nuno Coração","type":"authors"},{"content":"","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/tags/sample/","section":"タグ","summary":"","title":"Sample","type":"tags"},{"content":" Blowfish はあなたのコンテンツに命を宿します。\u0026#x1f60d; このセクションは、 Blowfish で様々な種類のコンテンツをどのように表示するのかを紹介するデモページを含みます。例としては分類一覧ページも参考になります。\nサイドノート: このページは一般的な Blowfish のリストで、 Hugo が生成した samples コンテンツタイプと記事の要約を表示する様に設定しています。\n","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/samples/","section":"サンプル","summary":"","title":"サンプル","type":"samples"},{"content":"Blowfish は Hugo の分類システムを完全にサポートし、どのような分類システムの設定でも適合できます。このような分類システムのリストは、用語リストの上に表示されるカスタムコンテンツもサポートしています。\nこのエリアはそれぞれの分類システムに追加の説明をする時に利用します。以下の高度なタグを確認して、このコンセプトをさらに発展させる方法をご覧ください。\n","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/tags/","section":"タグ","summary":"","title":"タグ","type":"tags"},{"content":"","date":"2022年10月12日","externalUrl":null,"permalink":"/zh-cn/tags/%E4%BD%9C%E8%80%85/","section":"标签","summary":"","title":"作者","type":"tags"},{"content":"","date":"2022年10月12日","externalUrl":null,"permalink":"/zh-cn/tags/%E7%A4%BA%E4%BE%8B/","section":"标签","summary":"","title":"示例","type":"tags"},{"content":"あなたの記事で著者のタクソノミーを使う方法の簡単な例です。\n","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/authors/","section":"著者のタクソノミーリストの例","summary":"","title":"著者のタクソノミーリストの例","type":"authors"},{"content":"これは、著者が複数人の記事がどのように見えるかの例です。\n","date":"2022年10月12日","externalUrl":null,"permalink":"/ja/samples/multiple-authors/","section":"サンプル","summary":"複数の著者の利用方法の簡単な例。","title":"複数の著者","type":"sample"},{"content":"","date":"2022年9月26日","externalUrl":null,"permalink":"/ja/tags/thumbnail/","section":"タグ","summary":"","title":"Thumbnail","type":"tags"},{"content":"記事でどのようにサムネイルを利用するかの簡単な例です。\n記事の平均的なディレクトリが以下のようなものだとしたら:\ncontent └── awesome_article.md 単一の markdown ファイルから、フォルダーに入っている形式に変更する必要があります。記事の名前と同一のディレクトリを作成し、その中に index.md ファイルを作成します。このようにすると、以下のような構成になります。\ncontent └── awesome_article └── featured.png 記事内に feature* から始まる名前の画像ファイル (ほとんどすべてのフォーマットに対応していますが、 .png か .jpg を推奨しています) を追加できます。以下が例です。\ncontent └── awesome_article ├── index.md └── featured.png これによって Blowfish は、記事のサムネイルをウェブサイトまたは SNS の oEmbed カードの紹介画像として利用できます。例としては、この記事の URL を oEmbeds を表示するプラットフォーム (例: Twitter, WhatsApp, Telegram など) にコピーペーストどのように表示されるかをご覧ください。\n","date":"2022年9月26日","externalUrl":null,"permalink":"/ja/samples/thumbnail_sample/","section":"サンプル","summary":"A quick example of how to start using Thumbnails in your artciles.","title":"サムネイル","type":"sample"},{"content":"","date":"2022年9月26日","externalUrl":null,"permalink":"/zh-cn/tags/%E7%BC%A9%E7%95%A5%E5%9B%BE/","section":"标签","summary":"","title":"缩略图","type":"tags"},{"content":"","date":"2020年8月14日","externalUrl":null,"permalink":"/ja/tags/icons/","section":"タグ","summary":"","title":"Icons","type":"tags"},{"content":"","date":"2020年8月14日","externalUrl":null,"permalink":"/ja/tags/shortcodes/","section":"タグ","summary":"","title":"Shortcodes","type":"tags"},{"content":"Blowfish はいくつもの FontAwesome 6 のアイコンを組み込み、サポートしています。これらはアイコンパーシャルまたはアイコンショートコードのどちらかを利用してウェブサイトに含めることが出来ます。\n加えて、カスタムアイコンも完全にサポートされています。プロジェクトのルートにある assets/icons/ ディレクトリーに SVG アイコンアセットを置くだけです。アイコンディレクトリ内のアイコンはテーマ全体で利用可能になります。自動的に色を塗りつぶすために、すべての SVG パスは fill=\u0026ldquo;currentColor\u0026rdquo; の XML 属性が必要です。\n組み込んでいるアイコンと対応する名称の全リストは以下を参照してください。\nアイコン名 プレビュー amazon apple bars bell blogger bluesky bomb bug check circle-info code codeberg \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e codepen comment dev discourse docker download dribbble edit email envelope expand eye facebook fire flickr fork foursquare ghost github gitlab globe goodreads google graduation-cap hackernews hashnode heart-empty heart image instagram itch-io keybase kickstarter ko-fi \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e language lastfm lightbulb line link linkedin list location-dot lock mastodon medium microsoft moon mug-hot music orcid patreon paypal peertube pencil pgpkey phone pinterest pixelfed poo reddit researchgate rss rss-square scale-balanced search shield skull-crossbones slack snapchat soundcloud spotify stack-overflow star steam stripe substack sun tag telegram threads tiktok triangle-exclamation tumblr twitch twitter wand-magic-sparkles whatsapp x-twitter xing Xing xmark youtube ","date":"2020年8月14日","externalUrl":null,"permalink":"/ja/samples/icons/","section":"サンプル","summary":"","title":"アイコン","type":"sample"},{"content":"","date":"2020年8月14日","externalUrl":null,"permalink":"/zh-cn/tags/%E5%9B%BE%E6%A0%87/","section":"标签","summary":"","title":"图标","type":"tags"},{"content":"","date":"2020年8月14日","externalUrl":null,"permalink":"/zh-cn/tags/%E7%AE%80%E7%A0%81/","section":"标签","summary":"","title":"简码","type":"tags"},{"content":"","date":"2019年3月11日","externalUrl":null,"permalink":"/ja/tags/css/","section":"タグ","summary":"","title":"Css","type":"tags"},{"content":"","date":"2019年3月11日","externalUrl":null,"permalink":"/ja/tags/html/","section":"タグ","summary":"","title":"Html","type":"tags"},{"content":"この記事は Blowfish を利用した基本的な Markdown フォーマットのサンプルを提供し、また基本的な HTML 要素がどのように装飾できるのかを示しています。\n見出し # こちらは HTML の \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 要素に相当する6種類の見出しを使用できます。 \u0026lt;h1\u0026gt; が最大の見出しで、 \u0026lt;h6\u0026gt; に近づくほど小さくなっていきます。\nH1 # H2 # H3 # H4 # H5 # H6 # 段落 # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nブロック引用 # ブロック引用要素は、他の情報元から引用された内容を表します。 footer または cite 要素を使った引用や、注釈や省略形などの変更を伴うことも可能です。\n出典なしのブロック引用 # Tiam, ad mint andaepu dandae nostion secatur sequo quae. ノート ブロック構文では、 Markdown 構文 を利用可能です。\n出典ありのブロック引用 # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nテーブル # テーブルは Markdown の仕様には含まれていません。しかし Hugp はテーブルをすぐに利用できるようサポートしています。\n名前 年齢 Bob 27 Alice 23 テーブルないのインライン Markdown # 斜体 太字 コード 斜体 太字 コード コードブロック # バックチックによるコードブロック # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;HTML5 資料の例\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;テスト\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 4スペースのインデントによるコードブロック # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;ja\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;HTML5 資料の例\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;テスト\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Hugo 内のショートコード・ハイライトを利用したコードブロック # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;HTML5 資料の例\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;テスト\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; リスト形式 # 順序のあるリスト # 1つ目のアイテム 2つ目のアイテム 3つ目のアイテム 順序がないリスト # リストアイテム 他のアイテム 他のアイテム 入れ子型リスト # 果実 りんご オレンジ バナナ 乳製品 牛乳 チーズ その他の要素 — abbr, sub, sup, kbd, mark # GIF はビットマップ画像フォーマットです。\nH2O\nXn + Yn = Zn\nCTRL+ALT+Deleteを押すことでセッションを終了出来ます。\n多くのサラマンダーは夜行性で、昆虫やミミズ、その他の生物を狩ります。\n上記の引用は、2015年11月18日に開催された Gopherfest での Rob Pike’s の 講演 からの抜粋です。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019年3月11日","externalUrl":null,"permalink":"/ja/samples/markdown/","section":"サンプル","summary":"\u003cp\u003eこの記事は Blowfish を利用した基本的な Markdown フォーマットのサンプルを提供し、また基本的な HTML 要素がどのように装飾できるのかを示しています。\u003c/p\u003e","title":"Markdown","type":"sample"},{"content":"","date":"2019年3月11日","externalUrl":null,"permalink":"/ja/tags/markdown/","section":"タグ","summary":"","title":"Markdown","type":"tags"},{"content":"","date":"2019年3月10日","externalUrl":null,"permalink":"/ja/tags/gist/","section":"タグ","summary":"","title":"Gist","type":"tags"},{"content":"","date":"2019年3月10日","externalUrl":null,"permalink":"/ja/tags/privacy/","section":"タグ","summary":"","title":"Privacy","type":"tags"},{"content":"","date":"2019年3月10日","externalUrl":null,"permalink":"/ja/tags/twitter/","section":"タグ","summary":"","title":"Twitter","type":"tags"},{"content":"","date":"2019年3月10日","externalUrl":null,"permalink":"/ja/tags/vimeo/","section":"タグ","summary":"","title":"Vimeo","type":"tags"},{"content":"","date":"2019年3月10日","externalUrl":null,"permalink":"/ja/tags/youtube/","section":"タグ","summary":"","title":"Youtube","type":"tags"},{"content":"Hugo には、リッチコンテンツのためのいくつかの組み込みショートコードとプライバシー設定、そして様々なソーシャルメディアの埋め込みを静的に、 JS なしで可能にする simple shortcodes のセットが同梱されています。\nYouTube # 下記のものは youtube ショートコードの組み込みを利用した例です。\nTwitter # この例はツイートを x ショートコードを利用して出力しています。こちらは user と id の二つのパラメータを必須としています。\n“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 代わりとして、 tweet ショートコードが完全にマークアップされた Twitter カードの埋め込みに利用できます、\nGist # gist ショートコードは GitHub Gist の埋め込みに利用できます。こちらは Gist のユーザー名と ID の二つのパラメータを必須としています。\nVimeo # vimeo_simple ショートコードは Vimeo 動画を埋め込むことができます。\n","date":"2019年3月10日","externalUrl":null,"permalink":"/ja/samples/rich-content/","section":"サンプル","summary":"This is an \u003cem\u003eexample\u003c/em\u003e of a \u003cstrong\u003erich\u003c/strong\u003e content summary.","title":"リッチコンテンツ","type":"sample"},{"content":"","date":"2019年3月10日","externalUrl":null,"permalink":"/zh-cn/tags/%E9%9A%90%E7%A7%81/","section":"标签","summary":"","title":"隐私","type":"tags"},{"content":"","date":"2019年3月9日","externalUrl":null,"permalink":"/ja/tags/latin/","section":"タグ","summary":"","title":"Latin","type":"tags"},{"content":"","date":"2019年3月9日","externalUrl":null,"permalink":"/ja/tags/text/","section":"タグ","summary":"","title":"Text","type":"tags"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt # The Van de Graaf Canon\nMane refeci capiebant unda mulcebat # Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019年3月9日","externalUrl":null,"permalink":"/ja/samples/placeholder-text/","section":"サンプル","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e","title":"代用語文","type":"sample"},{"content":"","date":"2019年3月9日","externalUrl":null,"permalink":"/zh-cn/tags/%E6%96%87%E6%9C%AC/","section":"标签","summary":"","title":"文本","type":"tags"},{"content":"","date":"2019年3月9日","externalUrl":null,"permalink":"/zh-cn/tags/%E6%8B%89%E4%B8%81%E8%AF%AD/","section":"标签","summary":"","title":"拉丁语","type":"tags"},{"content":"","date":"2019年3月8日","externalUrl":null,"permalink":"/ja/tags/katex/","section":"タグ","summary":"","title":"Katex","type":"tags"},{"content":"","date":"2019年3月8日","externalUrl":null,"permalink":"/ja/tags/maths/","section":"タグ","summary":"","title":"Maths","type":"tags"},{"content":"","date":"2019年3月8日","externalUrl":null,"permalink":"/zh-cn/tags/%E6%95%B0%E5%AD%A6/","section":"标签","summary":"","title":"数学","type":"tags"},{"content":"KaTeX は数学的記法を記事内にレンダリングする際に利用できます。\nBlowfish は数学的記法を利用する場合のみ、 KaTeX アセットをプロジェクトにバンドルします。これを機能させるには、単に記事内に katex ショートコード を含ませてください。以下が例です:\n{{\u0026lt; katex \u0026gt;}} ページ上のすべての KaTeX 構文は自動的にレンダリングされます。 利用可能な構文はサポートしている TeX 機能のオンラインの文献を参照してください。\nインライン表記 # インライン表記は \\( と \\) 記号で式を囲むことで生成できます。\n例:\n% KaTeX インライン表記 インライン表記: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\) インライン表記: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\nブロック表記 # または、ブロック表記は $$ 記号を利用することで生成できます。これによって、式が独自の HTML ブロックに出力されます。\n例:\n% KaTeX ブロック表記 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019年3月8日","externalUrl":null,"permalink":"/ja/samples/mathematical-notation/","section":"サンプル","summary":"\u003cp\u003eKaTeX は数学的記法を記事内にレンダリングする際に利用できます。\u003c/p\u003e","title":"数学的記法","type":"sample"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/ja/tags/chart/","section":"タグ","summary":"","title":"Chart","type":"tags"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/ja/tags/diagram/","section":"タグ","summary":"","title":"Diagram","type":"tags"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/ja/tags/graph/","section":"タグ","summary":"","title":"Graph","type":"tags"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/ja/tags/mermaid/","section":"タグ","summary":"","title":"Mermaid","type":"tags"},{"content":"Mermaid 図は mermaid ショートコードを使うことで Blowfish でサポートされています。ダイヤグラムのマークアップをショートコードを囲むだけです。 Blowfish は設定された colorScheme パラメータに合うように自動T系に Mermaid ダイヤグラムをテーマ化します。\nmermaid ショートコード資料にてより詳細を参照できます。\n以下の例は Mermaid 公式資料から抜粋した一分です。GitHub のページソースでマークアップを確認することができます。\nフローチャート # graph TD A[クリスマス] --\u003e|収入| B(買い物にいく) B --\u003e C{考える} B --\u003e G[/他/] C ==\u003e|1| D[ノートパソコン] C --\u003e|2| E[iPhone] C --\u003e|3| F[車] subgraph セクション C D E F G end 順序図 # sequenceDiagram autonumber par 行動 1 アリス-\u003e\u003eジョン: こんにちはジョン、お元気ですか? and 行動 2 アリス-\u003e\u003eボブ: こんにちはボブ、お元気ですか? end アリス-\u003e\u003e+ジョン: こんにちはジョン、お元気ですか? アリス-\u003e\u003e+ジョン: ジョン、聞こえていますか? ジョン--\u003e\u003e-アリス: こんにちはアリス、聞こえています! Note right of ジョン: ジョンは察しがよい ジョン--\u003e\u003e-アリス: とても気分がいいです! loop 毎分 ジョン--\u003eアリス: すばらしい! end クラス図 # classDiagram Animal \"1\" \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } 主従関係図 # erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" ","date":"2019年3月6日","externalUrl":null,"permalink":"/ja/samples/diagrams-flowcharts/","section":"サンプル","summary":"Mermaid を利用して簡単に図やフローチャートを記事に追加する方法。","title":"ダイアグラムとフローチャート","type":"sample"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/zh-cn/tags/%E5%9B%BE%E7%89%87/","section":"标签","summary":"","title":"图片","type":"tags"},{"content":"Blowfish は Chart.js の chart ショートコードを内蔵し、利用をサポートしています。ショートコードでグラフのマークアップを囲むだけです。 Blowfish は colorScheme パラメータで自動的にグラフのテーマが適応されますが、通常の Chart.js 構文を利用して色をカスタマイズすることも可能です。\nグラフのショートコード資料で更に詳細を参照出来ます。\n以下は Chart.js 公式資料から抜粋した例です。 GitHub でマークアップをページソースで見ることができます。\n棒グラフ # 折れ線グラフ # 円グラフ # ","date":"2019年3月6日","externalUrl":null,"permalink":"/ja/samples/charts/","section":"サンプル","summary":"Blowfish は強力な図表とデータの視覚化のために Chart.js を内蔵しています。","title":"図表","type":"sample"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/zh-cn/tags/%E8%A1%A8%E6%A0%BC/","section":"标签","summary":"","title":"表格","type":"tags"},{"content":"","date":"2019年3月6日","externalUrl":null,"permalink":"/zh-cn/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/","section":"标签","summary":"","title":"流程图","type":"tags"},{"content":"","date":"2019年3月5日","externalUrl":null,"permalink":"/ja/tags/emoji/","section":"タグ","summary":"","title":"Emoji","type":"tags"},{"content":"絵文字は Blowfish を通してデフォルトでサポートされています。絵文字はタイトル、メニューアイテム、そして記事のコンテンツで利用可能です。\nノート: これらの図形のレンダリングはブラウザとプラットフォームに依存します。絵文字をスタイルするには、サードパーティ製の絵文字フォントを利用するか、フォントスタックを利用します。 絵文字の置換は Blowfish 全体を通して自動的に行われるため、コンテンツや表で省略符号を利用しても、ビルド時に対応する記号に変換されます。\n例: see_no_evil \u0026#x1f648;, hear_no_evil \u0026#x1f649;, speak_no_evil \u0026#x1f64a;\n絵文字チートシートは絵文字ショートハンドコードのための便利な参照ページです。\n","date":"2019年3月5日","externalUrl":null,"permalink":"/ja/samples/emoji/","section":"サンプル","summary":"📖🏞️🧗🏽🐉🧙🏽‍♂️🧚🏽👸","title":"絵文字 🪂","type":"sample"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. \u0026#x1f680;\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","externalUrl":null,"permalink":"/tags/advanced/_index.it/","section":"Tags","summary":"","title":"Advanced","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/analytics/","section":"タグ","summary":"","title":"Analytics","type":"tags"},{"content":" Questa è una demo del layout background. Cambia layout \u0026orarr; npx blowfish-tools ","externalUrl":null,"permalink":"/_index.it/","section":"Product Heartbeat","summary":"","title":"Benvenuti a Blowfish!","type":"page"},{"content":" Blowfish dà vita ai tuoi contenuti. \u0026#x1f60d; Questa sezione contiene alcune pagine demo che mostrano come Blowfish esegue il rendering di diversi tipi di contenuto. Puoi anche vedere una pagina di esempio elenco tassonomia.\nNota a margine: Questa pagina è solo un elenco standard di articoli Blowfish e Hugo è stato configurato per generare un tipo di contenuto \u0026ldquo;campioni\u0026rdquo; e visualizzare riepiloghi degli articoli.\n","externalUrl":null,"permalink":"/samples/_index.it/","section":"Samples","summary":"","title":"Campioni","type":"samples"},{"content":"","externalUrl":null,"permalink":"/ja/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/ja/tags/comments/","section":"タグ","summary":"","title":"Comments","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/config/","section":"タグ","summary":"","title":"Config","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/content/","section":"タグ","summary":"","title":"Content","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/deployment/","section":"タグ","summary":"","title":"Deployment","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/docs/","section":"タグ","summary":"","title":"Docs","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/series/documentation/","section":"Series","summary":"","title":"Documentation","type":"series"},{"content":" Semplice ma potente. Scopri come utilizzare Blowfish e le sue funzionalità. Questa sezione contiene tutto ciò che devi sapere su Blowfish. Se sei nuovo, consulta la guida Installazione per iniziare o visita la sezione Esempi per vedere cosa può fare Blowfish.\n","externalUrl":null,"permalink":"/docs/_index.it/","section":"Documentation","summary":"","title":"Documenti","type":"docs"},{"content":"Un rapido esempio di come iniziare a utilizzare le tassonomie degli autori nei tuoi articoli.\n","externalUrl":null,"permalink":"/authors/_index.it/","section":"Authors Taxonomy Listing Example","summary":"","title":"Esempio di elenco di tassonomia degli autori","type":"authors"},{"content":"","externalUrl":null,"permalink":"/ja/tags/example/","section":"タグ","summary":"","title":"Example","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/favicons/","section":"タグ","summary":"","title":"Favicons","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/firebase/","section":"タグ","summary":"","title":"Firebase","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/front-matter/","section":"タグ","summary":"","title":"Front Matter","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/github/","section":"タグ","summary":"","title":"Github","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/homepage/","section":"タグ","summary":"","title":"Homepage","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/hosting/","section":"タグ","summary":"","title":"Hosting","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/icon/","section":"タグ","summary":"","title":"Icon","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/installation/","section":"タグ","summary":"","title":"Installation","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/layouts/","section":"タグ","summary":"","title":"Layouts","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/lead/","section":"タグ","summary":"","title":"Lead","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/likes/","section":"タグ","summary":"","title":"Likes","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/netlify/","section":"タグ","summary":"","title":"Netlify","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/new/","section":"タグ","summary":"","title":"New","type":"tags"},{"content":"La fantastica biografia di Nuno.\n","externalUrl":null,"permalink":"/authors/nunocoracao/_index.it/","section":"Authors Taxonomy Listing Example","summary":"","title":"Nuno Coraçao","type":"authors"},{"content":"","externalUrl":null,"permalink":"/ja/tags/partials/","section":"タグ","summary":"","title":"Partials","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/render/","section":"タグ","summary":"","title":"Render","type":"tags"},{"content":"La fantastica biografia fittizia di Dummy Second Author.\n","externalUrl":null,"permalink":"/authors/secondauthor/_index.it/","section":"Authors Taxonomy Listing Example","summary":"","title":"Secondo autore fittizio","type":"authors"},{"content":"","externalUrl":null,"permalink":"/ja/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/ja/tags/series/","section":"タグ","summary":"","title":"Series","type":"tags"},{"content":"Blowfish ha il pieno supporto per le tassonomie Hugo e si adatterà a qualsiasi impostazione tassonomica. Gli elenchi di tassonomia come questo supportano anche il contenuto personalizzato da visualizzare sopra l\u0026rsquo;elenco dei termini.\nQuest\u0026rsquo;area può essere utilizzata per aggiungere testo descrittivo aggiuntivo a ciascuna tassonomia. Dai un\u0026rsquo;occhiata al tag avanzato di seguito per vedere come portare questo concetto ancora oltre.\n","externalUrl":null,"permalink":"/tags/_index.it/","section":"Tags","summary":"","title":"Tag","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/tags/views/","section":"タグ","summary":"","title":"Views","type":"tags"},{"content":" シンプル、それでいて強力。 Blowfish の利用方法と特徴について学ぶ。 このセクションでは、Blowfish について知っておくべきことをすべて網羅しています。初めての方は、まずインストールガイドをご覧いただくか、サンプルセクションで Blowfish で何ができるかを確認してみてください。\n","externalUrl":null,"permalink":"/ja/docs/","section":"ドキュメント","summary":"","title":"ドキュメント","type":"docs"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E6%B8%B2%E6%9F%93%E5%99%A8/","section":"标签","summary":"","title":"渲染器","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/","section":"标签","summary":"","title":"统计服务","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E8%AF%84%E8%AE%BA/","section":"标签","summary":"","title":"评论","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E9%98%85%E8%AF%BB%E9%87%8F/","section":"标签","summary":"","title":"阅读量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E5%AE%89%E8%A3%85/","section":"标签","summary":"","title":"安装","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E7%B3%BB%E5%88%97/","section":"标签","summary":"","title":"系列","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E9%AB%98%E7%BA%A7/","section":"标签","summary":"","title":"高级","type":"tags"},{"content":"こちらは高度なタグです。 Blowfish の他のページの様に、個々の分類条項にカスタムコンテンツの追加やそれを条項リストの一番上に表示することが可能です。\u0026#x1f680;\nタイトルや説明など SEO や他の目的に利用するためのHugo のメタデータを定義するためにこれらのコンテンツページも利用可能です。\n","externalUrl":null,"permalink":"/ja/tags/advanced/","section":"タグ","summary":"","title":"高度なタグ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E4%B8%BB%E9%A1%B5/","section":"标签","summary":"","title":"主页","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E6%96%B0%E6%89%8B/","section":"标签","summary":"","title":"新手","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E6%89%98%E7%AE%A1/","section":"标签","summary":"","title":"托管","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E7%82%B9%E8%B5%9E%E9%87%8F/","section":"标签","summary":"","title":"点赞量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E5%86%85%E5%AE%B9/","section":"标签","summary":"","title":"内容","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E9%85%8D%E7%BD%AE/","section":"标签","summary":"","title":"配置","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E5%B8%83%E5%B1%80/","section":"标签","summary":"","title":"布局","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E9%83%A8%E7%BD%B2/","section":"标签","summary":"","title":"部署","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/series/%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"部署教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E6%96%87%E6%A1%A3/","section":"标签","summary":"","title":"文档","type":"tags"},{"content":"","externalUrl":null,"permalink":"/zh-cn/tags/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87/","section":"标签","summary":"","title":"网站图标","type":"tags"}]